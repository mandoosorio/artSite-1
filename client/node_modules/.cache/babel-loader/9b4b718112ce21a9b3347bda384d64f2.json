{"ast":null,"code":"const stripe = require('stripe')(process.env.STRIPE_SECRET_KEY);\n\nexport default async function handler(req, res) {\n  if (req.method === 'POST') {\n    try {\n      // Create Checkout Sessions from body params.\n      const session = await stripe.checkout.sessions.create({\n        line_items: [{\n          price: 'price_1Jch41QR8ZQnmKpPBeFpPLKL',\n          quantity: 1\n        }],\n        payment_method_types: ['card'],\n        mode: 'payment',\n        success_url: `${req.headers.origin}/?success=true&session_id={CHECKOUT_SESSION_ID}`,\n        cancel_url: `${req.headers.origin}/?canceled=true`\n      });\n      res.redirect(303, session.url);\n    } catch (err) {\n      res.status(err.statusCode || 500).json(err.message);\n    }\n  } else {\n    res.setHeader('Allow', 'POST');\n    res.status(405).end('Method Not Allowed');\n  }\n}","map":{"version":3,"sources":["/Volumes/Time Machine Backups/Art/my-art/client/src/components/Checkout/api/checkout_sessions.js"],"names":["stripe","require","process","env","STRIPE_SECRET_KEY","handler","req","res","method","session","checkout","sessions","create","line_items","price","quantity","payment_method_types","mode","success_url","headers","origin","cancel_url","redirect","url","err","status","statusCode","json","message","setHeader","end"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAP,CAAkBC,OAAO,CAACC,GAAR,CAAYC,iBAA9B,CAAf;;AAEA,eAAe,eAAeC,OAAf,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAiC;AAC9C,MAAID,GAAG,CAACE,MAAJ,KAAe,MAAnB,EAA2B;AACzB,QAAI;AACF;AACA,YAAMC,OAAO,GAAG,MAAMT,MAAM,CAACU,QAAP,CAAgBC,QAAhB,CAAyBC,MAAzB,CAAgC;AACpDC,QAAAA,UAAU,EAAE,CACV;AACEC,UAAAA,KAAK,EAAE,gCADT;AAEEC,UAAAA,QAAQ,EAAE;AAFZ,SADU,CADwC;AAOpDC,QAAAA,oBAAoB,EAAE,CACpB,MADoB,CAP8B;AAUpDC,QAAAA,IAAI,EAAE,SAV8C;AAWpDC,QAAAA,WAAW,EAAG,GAAEZ,GAAG,CAACa,OAAJ,CAAYC,MAAO,iDAXiB;AAYpDC,QAAAA,UAAU,EAAG,GAAEf,GAAG,CAACa,OAAJ,CAAYC,MAAO;AAZkB,OAAhC,CAAtB;AAeAb,MAAAA,GAAG,CAACe,QAAJ,CAAa,GAAb,EAAkBb,OAAO,CAACc,GAA1B;AACD,KAlBD,CAkBE,OAAOC,GAAP,EAAY;AACZjB,MAAAA,GAAG,CAACkB,MAAJ,CAAWD,GAAG,CAACE,UAAJ,IAAkB,GAA7B,EAAkCC,IAAlC,CAAuCH,GAAG,CAACI,OAA3C;AACD;AACF,GAtBD,MAsBO;AACLrB,IAAAA,GAAG,CAACsB,SAAJ,CAAc,OAAd,EAAuB,MAAvB;AACAtB,IAAAA,GAAG,CAACkB,MAAJ,CAAW,GAAX,EAAgBK,GAAhB,CAAoB,oBAApB;AACD;AACF","sourcesContent":["const stripe = require('stripe')(process.env.STRIPE_SECRET_KEY);\n\nexport default async function handler(req, res) {\n  if (req.method === 'POST') {\n    try {\n      // Create Checkout Sessions from body params.\n      const session = await stripe.checkout.sessions.create({\n        line_items: [\n          {\n            price: 'price_1Jch41QR8ZQnmKpPBeFpPLKL',\n            quantity: 1,\n          },\n        ],\n        payment_method_types: [\n          'card',\n        ],\n        mode: 'payment',\n        success_url: `${req.headers.origin}/?success=true&session_id={CHECKOUT_SESSION_ID}`,\n        cancel_url: `${req.headers.origin}/?canceled=true`,\n      });\n\n      res.redirect(303, session.url);\n    } catch (err) {\n      res.status(err.statusCode || 500).json(err.message);\n    }\n  } else {\n    res.setHeader('Allow', 'POST');\n    res.status(405).end('Method Not Allowed');\n  }\n}\n"]},"metadata":{},"sourceType":"module"}