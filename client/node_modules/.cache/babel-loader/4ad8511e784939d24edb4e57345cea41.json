{"ast":null,"code":"import { UPDATE_PRODUCTS, ADD_TO_CART, UPDATE_CART_QUANTITY, REMOVE_FROM_CART, ADD_MULTIPLE_TO_CART, UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY, CLEAR_CART, TOGGLE_CART } from \"./actions\";\nconst initialState = {\n  products: [],\n  categories: [],\n  currentCategory: \"\",\n  cart: [],\n  cartOpen: false\n};\nexport const reducers = (state = initialState, action) => {\n  switch (action.type) {\n    case UPDATE_PRODUCTS:\n      return { ...state,\n        products: [...action.products]\n      };\n\n    case ADD_TO_CART:\n      return { ...state,\n        cartOpen: true,\n        cart: [...state.cart, action.product] //whatever's in the cart plus whatever is being added through the action\n\n      };\n\n    case ADD_MULTIPLE_TO_CART:\n      return { ...state,\n        cart: [...state.cart, ...action.products]\n      };\n\n    case UPDATE_CART_QUANTITY:\n      return { ...state,\n        cartOpen: true,\n        // loops through cart array and updates product that mathces action product\n        cart: state.cart.map(product => {\n          if (action._id === product._id) {\n            product.purchaseQuantity = action.purchaseQuantity;\n          }\n\n          return product;\n        })\n      };\n\n    case REMOVE_FROM_CART:\n      //will go through cart array and remove whatever product is chosen from action\n      let newState = state.cart.filter(product => {\n        return product._id !== action._id;\n      });\n      return { ...state,\n        cartOpen: newState.length > 0,\n        // true/false if items in cart\n        cart: newState\n      };\n\n    case CLEAR_CART:\n      return { ...state,\n        cartOpen: false,\n        cart: [] //clear cart array of the state\n\n      };\n\n    case TOGGLE_CART:\n      return { ...state,\n        cartOpen: !state.cartOpen // opposite of whatever the current state is\n\n      };\n\n    case UPDATE_CATEGORIES:\n      return { ...state,\n        categories: [...action.categories]\n      };\n\n    case UPDATE_CURRENT_CATEGORY:\n      return { ...state,\n        currentCategory: action.currentCategory\n      };\n\n    default:\n      return state;\n  }\n};\nexport default reducers;","map":{"version":3,"sources":["C:/Users/osori/OneDrive/Desktop/artSite-1/client/src/utils/reducers.js"],"names":["UPDATE_PRODUCTS","ADD_TO_CART","UPDATE_CART_QUANTITY","REMOVE_FROM_CART","ADD_MULTIPLE_TO_CART","UPDATE_CATEGORIES","UPDATE_CURRENT_CATEGORY","CLEAR_CART","TOGGLE_CART","initialState","products","categories","currentCategory","cart","cartOpen","reducers","state","action","type","product","map","_id","purchaseQuantity","newState","filter","length"],"mappings":"AAAA,SACEA,eADF,EAEEC,WAFF,EAGEC,oBAHF,EAIEC,gBAJF,EAKEC,oBALF,EAMEC,iBANF,EAOEC,uBAPF,EAQEC,UARF,EASEC,WATF,QAUO,WAVP;AAYA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAE,EADS;AAEnBC,EAAAA,UAAU,EAAE,EAFO;AAGnBC,EAAAA,eAAe,EAAE,EAHE;AAInBC,EAAAA,IAAI,EAAE,EAJa;AAKnBC,EAAAA,QAAQ,EAAE;AALS,CAArB;AAQA,OAAO,MAAMC,QAAQ,GAAG,CAACC,KAAK,GAAGP,YAAT,EAAuBQ,MAAvB,KAAkC;AACxD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKlB,eAAL;AACI,aAAO,EACH,GAAGgB,KADA;AAEHN,QAAAA,QAAQ,EAAE,CAAC,GAAGO,MAAM,CAACP,QAAX;AAFP,OAAP;;AAKJ,SAAKT,WAAL;AACI,aAAO,EACH,GAAGe,KADA;AAEHF,QAAAA,QAAQ,EAAE,IAFP;AAGHD,QAAAA,IAAI,EAAE,CAAC,GAAGG,KAAK,CAACH,IAAV,EAAgBI,MAAM,CAACE,OAAvB,CAHH,CAGmC;;AAHnC,OAAP;;AAMJ,SAAKf,oBAAL;AACI,aAAO,EACH,GAAGY,KADA;AAEHH,QAAAA,IAAI,EAAE,CAAC,GAAGG,KAAK,CAACH,IAAV,EAAgB,GAAGI,MAAM,CAACP,QAA1B;AAFH,OAAP;;AAKJ,SAAKR,oBAAL;AACI,aAAO,EACH,GAAGc,KADA;AAEHF,QAAAA,QAAQ,EAAE,IAFP;AAGH;AACAD,QAAAA,IAAI,EAAEG,KAAK,CAACH,IAAN,CAAWO,GAAX,CAAeD,OAAO,IAAI;AAC5B,cAAIF,MAAM,CAACI,GAAP,KAAeF,OAAO,CAACE,GAA3B,EAAgC;AAC5BF,YAAAA,OAAO,CAACG,gBAAR,GAA2BL,MAAM,CAACK,gBAAlC;AACH;;AACD,iBAAOH,OAAP;AACH,SALK;AAJH,OAAP;;AAYJ,SAAKhB,gBAAL;AACI;AACA,UAAIoB,QAAQ,GAAGP,KAAK,CAACH,IAAN,CAAWW,MAAX,CAAkBL,OAAO,IAAI;AACxC,eAAOA,OAAO,CAACE,GAAR,KAAgBJ,MAAM,CAACI,GAA9B;AACH,OAFc,CAAf;AAGA,aAAO,EACH,GAAGL,KADA;AAEHF,QAAAA,QAAQ,EAAES,QAAQ,CAACE,MAAT,GAAkB,CAFzB;AAE4B;AAC/BZ,QAAAA,IAAI,EAAEU;AAHH,OAAP;;AAMJ,SAAKhB,UAAL;AACI,aAAO,EACH,GAAGS,KADA;AAEHF,QAAAA,QAAQ,EAAE,KAFP;AAGHD,QAAAA,IAAI,EAAE,EAHH,CAGM;;AAHN,OAAP;;AAMJ,SAAKL,WAAL;AACI,aAAO,EACH,GAAGQ,KADA;AAEHF,QAAAA,QAAQ,EAAE,CAACE,KAAK,CAACF,QAFd,CAEuB;;AAFvB,OAAP;;AAKJ,SAAKT,iBAAL;AACI,aAAO,EACH,GAAGW,KADA;AAEHL,QAAAA,UAAU,EAAE,CAAC,GAAGM,MAAM,CAACN,UAAX;AAFT,OAAP;;AAKJ,SAAKL,uBAAL;AACI,aAAO,EACH,GAAGU,KADA;AAEHJ,QAAAA,eAAe,EAAEK,MAAM,CAACL;AAFrB,OAAP;;AAKJ;AACI,aAAOI,KAAP;AAtER;AAwED,CAzEM;AA2EP,eAAeD,QAAf","sourcesContent":["import {\n  UPDATE_PRODUCTS,\n  ADD_TO_CART,\n  UPDATE_CART_QUANTITY,\n  REMOVE_FROM_CART,\n  ADD_MULTIPLE_TO_CART,\n  UPDATE_CATEGORIES,\n  UPDATE_CURRENT_CATEGORY,\n  CLEAR_CART,\n  TOGGLE_CART\n} from \"./actions\";\n\nconst initialState = {\n  products: [],\n  categories: [],\n  currentCategory: \"\",\n  cart: [],\n  cartOpen: false\n};\n\nexport const reducers = (state = initialState, action) => {\n  switch (action.type) {\n      case UPDATE_PRODUCTS:\n          return {\n              ...state,\n              products: [...action.products]\n          };\n\n      case ADD_TO_CART:\n          return {\n              ...state,\n              cartOpen: true,\n              cart: [...state.cart, action.product] //whatever's in the cart plus whatever is being added through the action\n          };\n\n      case ADD_MULTIPLE_TO_CART:\n          return {\n              ...state,\n              cart: [...state.cart, ...action.products]\n          }\n\n      case UPDATE_CART_QUANTITY:\n          return {\n              ...state,\n              cartOpen: true, \n              // loops through cart array and updates product that mathces action product\n              cart: state.cart.map(product => {\n                  if (action._id === product._id) {\n                      product.purchaseQuantity = action.purchaseQuantity\n                  }\n                  return product\n              })\n          };\n\n      case REMOVE_FROM_CART:\n          //will go through cart array and remove whatever product is chosen from action\n          let newState = state.cart.filter(product => {\n              return product._id !== action._id;\n          });\n          return {\n              ...state,\n              cartOpen: newState.length > 0, // true/false if items in cart\n              cart: newState\n          };\n\n      case CLEAR_CART:\n          return {\n              ...state,\n              cartOpen: false,\n              cart: [] //clear cart array of the state\n          };\n\n      case TOGGLE_CART:\n          return {\n              ...state,\n              cartOpen: !state.cartOpen // opposite of whatever the current state is\n          }\n\n      case UPDATE_CATEGORIES:\n          return {\n              ...state,\n              categories: [...action.categories]\n          };\n\n      case UPDATE_CURRENT_CATEGORY:\n          return {\n              ...state,\n              currentCategory: action.currentCategory\n          }\n\n      default:\n          return state;\n  }\n};\n\nexport default reducers;"]},"metadata":{},"sourceType":"module"}