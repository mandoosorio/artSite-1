{"ast":null,"code":"'use strict';\n\nconst resources = require('./resources');\n\nconst DEFAULT_HOST = 'api.stripe.com';\nconst DEFAULT_PORT = '443';\nconst DEFAULT_BASE_PATH = '/v1/';\nconst DEFAULT_API_VERSION = null;\nconst DEFAULT_TIMEOUT = 80000;\nStripe.PACKAGE_VERSION = require('../package.json').version;\n\nconst utils = require('./utils');\n\nconst {\n  determineProcessUserAgentProperties,\n  emitWarning\n} = utils;\nStripe.USER_AGENT = {\n  bindings_version: Stripe.PACKAGE_VERSION,\n  lang: 'node',\n  publisher: 'stripe',\n  uname: null,\n  typescript: false,\n  ...determineProcessUserAgentProperties()\n};\n/** @private */\n\nStripe._UNAME_CACHE = null;\nconst MAX_NETWORK_RETRY_DELAY_SEC = 2;\nconst INITIAL_NETWORK_RETRY_DELAY_SEC = 0.5;\nconst APP_INFO_PROPERTIES = ['name', 'version', 'url', 'partner_id'];\nconst ALLOWED_CONFIG_PROPERTIES = ['apiVersion', 'typescript', 'maxNetworkRetries', 'httpAgent', 'httpClient', 'timeout', 'host', 'port', 'protocol', 'telemetry', 'appInfo', 'stripeAccount'];\n\nconst EventEmitter = require('events').EventEmitter;\n\nStripe.StripeResource = require('./StripeResource');\nStripe.resources = resources;\n\nconst {\n  HttpClient,\n  HttpClientResponse\n} = require('./net/HttpClient');\n\nStripe.HttpClient = HttpClient;\nStripe.HttpClientResponse = HttpClientResponse;\n\nconst CryptoProvider = require('./crypto/CryptoProvider');\n\nStripe.CryptoProvider = CryptoProvider;\n\nfunction Stripe(key, config = {}) {\n  if (!(this instanceof Stripe)) {\n    return new Stripe(key, config);\n  }\n\n  const props = this._getPropsFromConfig(config);\n\n  Object.defineProperty(this, '_emitter', {\n    value: new EventEmitter(),\n    enumerable: false,\n    configurable: false,\n    writable: false\n  });\n  this.VERSION = Stripe.PACKAGE_VERSION;\n  this.on = this._emitter.on.bind(this._emitter);\n  this.once = this._emitter.once.bind(this._emitter);\n  this.off = this._emitter.removeListener.bind(this._emitter);\n\n  if (props.protocol && props.protocol !== 'https' && (!props.host || /\\.stripe\\.com$/.test(props.host))) {\n    throw new Error('The `https` protocol must be used when sending requests to `*.stripe.com`');\n  }\n\n  const agent = props.httpAgent || null;\n  this._api = {\n    auth: null,\n    host: props.host || DEFAULT_HOST,\n    port: props.port || DEFAULT_PORT,\n    protocol: props.protocol || 'https',\n    basePath: DEFAULT_BASE_PATH,\n    version: props.apiVersion || DEFAULT_API_VERSION,\n    timeout: utils.validateInteger('timeout', props.timeout, DEFAULT_TIMEOUT),\n    maxNetworkRetries: utils.validateInteger('maxNetworkRetries', props.maxNetworkRetries, 0),\n    agent: agent,\n    httpClient: props.httpClient || Stripe.createNodeHttpClient(agent),\n    dev: false,\n    stripeAccount: props.stripeAccount || null\n  };\n  const typescript = props.typescript || false;\n\n  if (typescript !== Stripe.USER_AGENT.typescript) {\n    // The mutation here is uncomfortable, but likely fastest;\n    // serializing the user agent involves shelling out to the system,\n    // and given some users may instantiate the library many times without switching between TS and non-TS,\n    // we only want to incur the performance hit when that actually happens.\n    Stripe.USER_AGENT.typescript = typescript;\n  }\n\n  if (props.appInfo) {\n    this._setAppInfo(props.appInfo);\n  }\n\n  this._prepResources();\n\n  this._setApiKey(key);\n\n  this.errors = require('./Error');\n  this.webhooks = require('./Webhooks');\n  this._prevRequestMetrics = [];\n  this._enableTelemetry = props.telemetry !== false; // Expose StripeResource on the instance too\n\n  this.StripeResource = Stripe.StripeResource;\n}\n\nStripe.errors = require('./Error');\nStripe.webhooks = require('./Webhooks');\n\nStripe.createNodeHttpClient = agent => {\n  const {\n    NodeHttpClient\n  } = require('./net/NodeHttpClient');\n\n  return new NodeHttpClient(agent);\n};\n\nStripe.prototype = {\n  /**\n   * @deprecated will be removed in a future major version. Use the config object instead:\n   *\n   * const stripe = new Stripe(API_KEY, {\n   *   host: 'example.com',\n   *   port: '8080',\n   *   protocol: 'http',\n   * });\n   *\n   */\n  setHost(host, port, protocol) {\n    emitWarning('`setHost` is deprecated. Use the `host` config option instead.');\n\n    this._setApiField('host', host);\n\n    if (port) {\n      this.setPort(port);\n    }\n\n    if (protocol) {\n      this.setProtocol(protocol);\n    }\n  },\n\n  /**\n   * @deprecated will be removed in a future major version. Use the config object instead:\n   *\n   * const stripe = new Stripe(API_KEY, {\n   *   protocol: 'http',\n   * });\n   *\n   */\n  setProtocol(protocol) {\n    emitWarning('`setProtocol` is deprecated. Use the `protocol` config option instead.');\n\n    this._setApiField('protocol', protocol.toLowerCase());\n  },\n\n  /**\n   * @deprecated will be removed in a future major version. Use the config object instead:\n   *\n   * const stripe = new Stripe(API_KEY, {\n   *   port: 3000,\n   * });\n   *\n   */\n  setPort(port) {\n    emitWarning('`setPort` is deprecated. Use the `port` config option instead.');\n\n    this._setApiField('port', port);\n  },\n\n  /**\n   * @deprecated will be removed in a future major version. Use the config object instead:\n   *\n   * const stripe = new Stripe(API_KEY, {\n   *   apiVersion: API_VERSION,\n   * });\n   *\n   */\n  setApiVersion(version) {\n    emitWarning('`setApiVersion` is deprecated. Use the `apiVersion` config or request option instead.');\n\n    if (version) {\n      this._setApiField('version', version);\n    }\n  },\n\n  /**\n   * @deprecated will be removed in a future major version. Use the config object instead:\n   *\n   * const stripe = new Stripe(API_KEY);\n   *\n   * Or, for Stripe Connect, use `stripeAccount` instead:\n   *\n   * const stripe = new Stripe(API_KEY, {\n   *   stripeAccount: 'acct_...',\n   * });\n   *\n   * Or, to use a different apiKey on a given request:\n   *\n   * stripe.customers.create(params, {apiKey: 'sk_test_...'});\n   */\n  setApiKey(key) {\n    emitWarning('`setApiKey` is deprecated. Use the `apiKey` request option instead.');\n\n    this._setApiKey(key);\n  },\n\n  /**\n   * @private\n   */\n  _setApiKey(key) {\n    if (key) {\n      this._setApiField('auth', `Bearer ${key}`);\n    }\n  },\n\n  /**\n   * @deprecated will be removed in a future major version. Use the config object instead:\n   *\n   * const stripe = new Stripe(API_KEY, {\n   *   timeout: TIMEOUT_MS,\n   * });\n   */\n  setTimeout(timeout) {\n    emitWarning('`setTimeout` is deprecated. Use the `timeout` config or request option instead.');\n\n    this._setApiField('timeout', timeout == null ? DEFAULT_TIMEOUT : timeout);\n  },\n\n  /**\n   * @deprecated will be removed in a future major version. Use the config object instead:\n   *\n   * const stripe = new Stripe(API_KEY, {\n   *   appInfo: {\n   *     name: 'MyPlugin',\n   *     version: '1.4.2',\n   *     url: 'https://myplugin.com',\n   *     partner_id: '1234',\n   *   },\n   * });\n   */\n  setAppInfo(info) {\n    emitWarning('`setAppInfo` is deprecated. Use the `appInfo` config option instead.');\n\n    this._setAppInfo(info);\n  },\n\n  /**\n   * @private\n   * This may be removed in the future.\n   */\n  _setAppInfo(info) {\n    if (info && typeof info !== 'object') {\n      throw new Error('AppInfo must be an object.');\n    }\n\n    if (info && !info.name) {\n      throw new Error('AppInfo.name is required');\n    }\n\n    info = info || {};\n    const appInfo = APP_INFO_PROPERTIES.reduce((accum, prop) => {\n      if (typeof info[prop] == 'string') {\n        accum = accum || {};\n        accum[prop] = info[prop];\n      }\n\n      return accum;\n    }, undefined);\n    this._appInfo = appInfo;\n  },\n\n  /**\n   * @deprecated will be removed in a future major version. Use the config object instead:\n   *\n   * const ProxyAgent = require('https-proxy-agent');\n   * const stripe = new Stripe(API_KEY, {\n   *   httpAgent: new ProxyAgent(process.env.http_proxy),\n   * });\n   *\n   */\n  setHttpAgent(agent) {\n    emitWarning('`setHttpAgent` is deprecated. Use the `httpAgent` config option instead.');\n\n    this._setApiField('agent', agent);\n  },\n\n  /**\n   * @private\n   * This may be removed in the future.\n   */\n  _setApiField(key, value) {\n    this._api[key] = value;\n  },\n\n  /**\n   * @private\n   * Please open or upvote an issue at github.com/stripe/stripe-node\n   * if you use this, detailing your use-case.\n   *\n   * It may be deprecated and removed in the future.\n   */\n  getApiField(key) {\n    return this._api[key];\n  },\n\n  setClientId(clientId) {\n    this._clientId = clientId;\n  },\n\n  getClientId() {\n    return this._clientId;\n  },\n\n  /**\n   * @private\n   * Please open or upvote an issue at github.com/stripe/stripe-node\n   * if you use this, detailing your use-case.\n   *\n   * It may be deprecated and removed in the future.\n   */\n  getConstant: c => {\n    switch (c) {\n      case 'DEFAULT_HOST':\n        return DEFAULT_HOST;\n\n      case 'DEFAULT_PORT':\n        return DEFAULT_PORT;\n\n      case 'DEFAULT_BASE_PATH':\n        return DEFAULT_BASE_PATH;\n\n      case 'DEFAULT_API_VERSION':\n        return DEFAULT_API_VERSION;\n\n      case 'DEFAULT_TIMEOUT':\n        return DEFAULT_TIMEOUT;\n\n      case 'MAX_NETWORK_RETRY_DELAY_SEC':\n        return MAX_NETWORK_RETRY_DELAY_SEC;\n\n      case 'INITIAL_NETWORK_RETRY_DELAY_SEC':\n        return INITIAL_NETWORK_RETRY_DELAY_SEC;\n    }\n\n    return Stripe[c];\n  },\n\n  getMaxNetworkRetries() {\n    return this.getApiField('maxNetworkRetries');\n  },\n\n  /**\n   * @deprecated will be removed in a future major version. Use the config object instead:\n   *\n   * const stripe = new Stripe(API_KEY, {\n   *   maxNetworkRetries: 2,\n   * });\n   *\n   */\n  setMaxNetworkRetries(maxNetworkRetries) {\n    this._setApiNumberField('maxNetworkRetries', maxNetworkRetries);\n  },\n\n  /**\n   * @private\n   * This may be removed in the future.\n   */\n  _setApiNumberField(prop, n, defaultVal) {\n    const val = utils.validateInteger(prop, n, defaultVal);\n\n    this._setApiField(prop, val);\n  },\n\n  getMaxNetworkRetryDelay() {\n    return MAX_NETWORK_RETRY_DELAY_SEC;\n  },\n\n  getInitialNetworkRetryDelay() {\n    return INITIAL_NETWORK_RETRY_DELAY_SEC;\n  },\n\n  /**\n   * @private\n   */\n  getUname(cb) {\n    if (!Stripe._UNAME_CACHE) {\n      Stripe._UNAME_CACHE = new Promise(resolve => {\n        utils.safeExec('uname -a', (err, uname) => {\n          resolve(uname);\n        });\n      });\n    }\n\n    Stripe._UNAME_CACHE.then(uname => cb(uname));\n  },\n\n  /**\n   * @private\n   * Please open or upvote an issue at github.com/stripe/stripe-node\n   * if you use this, detailing your use-case.\n   *\n   * It may be deprecated and removed in the future.\n   *\n   * Gets a JSON version of a User-Agent and uses a cached version for a slight\n   * speed advantage.\n   */\n  getClientUserAgent(cb) {\n    return this.getClientUserAgentSeeded(Stripe.USER_AGENT, cb);\n  },\n\n  /**\n   * @private\n   * Please open or upvote an issue at github.com/stripe/stripe-node\n   * if you use this, detailing your use-case.\n   *\n   * It may be deprecated and removed in the future.\n   *\n   * Gets a JSON version of a User-Agent by encoding a seeded object and\n   * fetching a uname from the system.\n   */\n  getClientUserAgentSeeded(seed, cb) {\n    this.getUname(uname => {\n      const userAgent = {};\n\n      for (const field in seed) {\n        userAgent[field] = encodeURIComponent(seed[field]);\n      } // URI-encode in case there are unusual characters in the system's uname.\n\n\n      userAgent.uname = encodeURIComponent(uname || 'UNKNOWN');\n      const client = this.getApiField('httpClient');\n\n      if (client) {\n        userAgent.httplib = encodeURIComponent(client.getClientName());\n      }\n\n      if (this._appInfo) {\n        userAgent.application = this._appInfo;\n      }\n\n      cb(JSON.stringify(userAgent));\n    });\n  },\n\n  /**\n   * @private\n   * Please open or upvote an issue at github.com/stripe/stripe-node\n   * if you use this, detailing your use-case.\n   *\n   * It may be deprecated and removed in the future.\n   */\n  getAppInfoAsString() {\n    if (!this._appInfo) {\n      return '';\n    }\n\n    let formatted = this._appInfo.name;\n\n    if (this._appInfo.version) {\n      formatted += `/${this._appInfo.version}`;\n    }\n\n    if (this._appInfo.url) {\n      formatted += ` (${this._appInfo.url})`;\n    }\n\n    return formatted;\n  },\n\n  /**\n   * @deprecated will be removed in a future major version. Use the config object instead:\n   *\n   * const stripe = new Stripe(API_KEY, {\n   *   telemetry: false,\n   * });\n   *\n   */\n  setTelemetryEnabled(enableTelemetry) {\n    emitWarning('`setTelemetryEnabled` is deprecated. Use the `telemetry` config option instead.');\n    this._enableTelemetry = enableTelemetry;\n  },\n\n  getTelemetryEnabled() {\n    return this._enableTelemetry;\n  },\n\n  /**\n   * @private\n   * This may be removed in the future.\n   */\n  _prepResources() {\n    for (const name in resources) {\n      this[utils.pascalToCamelCase(name)] = new resources[name](this);\n    }\n  },\n\n  /**\n   * @private\n   * This may be removed in the future.\n   */\n  _getPropsFromConfig(config) {\n    // If config is null or undefined, just bail early with no props\n    if (!config) {\n      return {};\n    } // config can be an object or a string\n\n\n    const isString = typeof config === 'string';\n    const isObject = config === Object(config) && !Array.isArray(config);\n\n    if (!isObject && !isString) {\n      throw new Error('Config must either be an object or a string');\n    } // If config is a string, we assume the old behavior of passing in a string representation of the api version\n\n\n    if (isString) {\n      return {\n        apiVersion: config\n      };\n    } // If config is an object, we assume the new behavior and make sure it doesn't contain any unexpected values\n\n\n    const values = Object.keys(config).filter(value => !ALLOWED_CONFIG_PROPERTIES.includes(value));\n\n    if (values.length > 0) {\n      throw new Error(`Config object may only contain the following: ${ALLOWED_CONFIG_PROPERTIES.join(', ')}`);\n    }\n\n    return config;\n  }\n\n};\nmodule.exports = Stripe; // expose constructor as a named property to enable mocking with Sinon.JS\n\nmodule.exports.Stripe = Stripe; // Allow use with the TypeScript compiler without `esModuleInterop`.\n// We may also want to add `Object.defineProperty(exports, \"__esModule\", {value: true});` in the future, so that Babel users will use the `default` version.\n\nmodule.exports.default = Stripe;","map":{"version":3,"sources":["/Volumes/Time Machine Backups/Art/my-art/node_modules/stripe/lib/stripe.js"],"names":["resources","require","DEFAULT_HOST","DEFAULT_PORT","DEFAULT_BASE_PATH","DEFAULT_API_VERSION","DEFAULT_TIMEOUT","Stripe","PACKAGE_VERSION","version","utils","determineProcessUserAgentProperties","emitWarning","USER_AGENT","bindings_version","lang","publisher","uname","typescript","_UNAME_CACHE","MAX_NETWORK_RETRY_DELAY_SEC","INITIAL_NETWORK_RETRY_DELAY_SEC","APP_INFO_PROPERTIES","ALLOWED_CONFIG_PROPERTIES","EventEmitter","StripeResource","HttpClient","HttpClientResponse","CryptoProvider","key","config","props","_getPropsFromConfig","Object","defineProperty","value","enumerable","configurable","writable","VERSION","on","_emitter","bind","once","off","removeListener","protocol","host","test","Error","agent","httpAgent","_api","auth","port","basePath","apiVersion","timeout","validateInteger","maxNetworkRetries","httpClient","createNodeHttpClient","dev","stripeAccount","appInfo","_setAppInfo","_prepResources","_setApiKey","errors","webhooks","_prevRequestMetrics","_enableTelemetry","telemetry","NodeHttpClient","prototype","setHost","_setApiField","setPort","setProtocol","toLowerCase","setApiVersion","setApiKey","setTimeout","setAppInfo","info","name","reduce","accum","prop","undefined","_appInfo","setHttpAgent","getApiField","setClientId","clientId","_clientId","getClientId","getConstant","c","getMaxNetworkRetries","setMaxNetworkRetries","_setApiNumberField","n","defaultVal","val","getMaxNetworkRetryDelay","getInitialNetworkRetryDelay","getUname","cb","Promise","resolve","safeExec","err","then","getClientUserAgent","getClientUserAgentSeeded","seed","userAgent","field","encodeURIComponent","client","httplib","getClientName","application","JSON","stringify","getAppInfoAsString","formatted","url","setTelemetryEnabled","enableTelemetry","getTelemetryEnabled","pascalToCamelCase","isString","isObject","Array","isArray","values","keys","filter","includes","length","join","module","exports","default"],"mappings":"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","sourcesContent":["'use strict';\n\nconst resources = require('./resources');\n\nconst DEFAULT_HOST = 'api.stripe.com';\nconst DEFAULT_PORT = '443';\nconst DEFAULT_BASE_PATH = '/v1/';\nconst DEFAULT_API_VERSION = null;\n\nconst DEFAULT_TIMEOUT = 80000;\n\nStripe.PACKAGE_VERSION = require('../package.json').version;\n\nconst utils = require('./utils');\nconst {determineProcessUserAgentProperties, emitWarning} = utils;\n\nStripe.USER_AGENT = {\n  bindings_version: Stripe.PACKAGE_VERSION,\n  lang: 'node',\n  publisher: 'stripe',\n  uname: null,\n  typescript: false,\n  ...determineProcessUserAgentProperties(),\n};\n\n/** @private */\nStripe._UNAME_CACHE = null;\n\nconst MAX_NETWORK_RETRY_DELAY_SEC = 2;\nconst INITIAL_NETWORK_RETRY_DELAY_SEC = 0.5;\n\nconst APP_INFO_PROPERTIES = ['name', 'version', 'url', 'partner_id'];\nconst ALLOWED_CONFIG_PROPERTIES = [\n  'apiVersion',\n  'typescript',\n  'maxNetworkRetries',\n  'httpAgent',\n  'httpClient',\n  'timeout',\n  'host',\n  'port',\n  'protocol',\n  'telemetry',\n  'appInfo',\n  'stripeAccount',\n];\n\nconst EventEmitter = require('events').EventEmitter;\n\nStripe.StripeResource = require('./StripeResource');\nStripe.resources = resources;\n\nconst {HttpClient, HttpClientResponse} = require('./net/HttpClient');\nStripe.HttpClient = HttpClient;\nStripe.HttpClientResponse = HttpClientResponse;\n\nconst CryptoProvider = require('./crypto/CryptoProvider');\nStripe.CryptoProvider = CryptoProvider;\n\nfunction Stripe(key, config = {}) {\n  if (!(this instanceof Stripe)) {\n    return new Stripe(key, config);\n  }\n\n  const props = this._getPropsFromConfig(config);\n\n  Object.defineProperty(this, '_emitter', {\n    value: new EventEmitter(),\n    enumerable: false,\n    configurable: false,\n    writable: false,\n  });\n\n  this.VERSION = Stripe.PACKAGE_VERSION;\n\n  this.on = this._emitter.on.bind(this._emitter);\n  this.once = this._emitter.once.bind(this._emitter);\n  this.off = this._emitter.removeListener.bind(this._emitter);\n\n  if (\n    props.protocol &&\n    props.protocol !== 'https' &&\n    (!props.host || /\\.stripe\\.com$/.test(props.host))\n  ) {\n    throw new Error(\n      'The `https` protocol must be used when sending requests to `*.stripe.com`'\n    );\n  }\n\n  const agent = props.httpAgent || null;\n\n  this._api = {\n    auth: null,\n    host: props.host || DEFAULT_HOST,\n    port: props.port || DEFAULT_PORT,\n    protocol: props.protocol || 'https',\n    basePath: DEFAULT_BASE_PATH,\n    version: props.apiVersion || DEFAULT_API_VERSION,\n    timeout: utils.validateInteger('timeout', props.timeout, DEFAULT_TIMEOUT),\n    maxNetworkRetries: utils.validateInteger(\n      'maxNetworkRetries',\n      props.maxNetworkRetries,\n      0\n    ),\n    agent: agent,\n    httpClient: props.httpClient || Stripe.createNodeHttpClient(agent),\n    dev: false,\n    stripeAccount: props.stripeAccount || null,\n  };\n\n  const typescript = props.typescript || false;\n  if (typescript !== Stripe.USER_AGENT.typescript) {\n    // The mutation here is uncomfortable, but likely fastest;\n    // serializing the user agent involves shelling out to the system,\n    // and given some users may instantiate the library many times without switching between TS and non-TS,\n    // we only want to incur the performance hit when that actually happens.\n    Stripe.USER_AGENT.typescript = typescript;\n  }\n\n  if (props.appInfo) {\n    this._setAppInfo(props.appInfo);\n  }\n\n  this._prepResources();\n  this._setApiKey(key);\n\n  this.errors = require('./Error');\n  this.webhooks = require('./Webhooks');\n\n  this._prevRequestMetrics = [];\n  this._enableTelemetry = props.telemetry !== false;\n\n  // Expose StripeResource on the instance too\n  this.StripeResource = Stripe.StripeResource;\n}\n\nStripe.errors = require('./Error');\nStripe.webhooks = require('./Webhooks');\n\nStripe.createNodeHttpClient = (agent) => {\n  const {NodeHttpClient} = require('./net/NodeHttpClient');\n  return new NodeHttpClient(agent);\n};\n\nStripe.prototype = {\n  /**\n   * @deprecated will be removed in a future major version. Use the config object instead:\n   *\n   * const stripe = new Stripe(API_KEY, {\n   *   host: 'example.com',\n   *   port: '8080',\n   *   protocol: 'http',\n   * });\n   *\n   */\n  setHost(host, port, protocol) {\n    emitWarning(\n      '`setHost` is deprecated. Use the `host` config option instead.'\n    );\n    this._setApiField('host', host);\n    if (port) {\n      this.setPort(port);\n    }\n    if (protocol) {\n      this.setProtocol(protocol);\n    }\n  },\n\n  /**\n   * @deprecated will be removed in a future major version. Use the config object instead:\n   *\n   * const stripe = new Stripe(API_KEY, {\n   *   protocol: 'http',\n   * });\n   *\n   */\n  setProtocol(protocol) {\n    emitWarning(\n      '`setProtocol` is deprecated. Use the `protocol` config option instead.'\n    );\n    this._setApiField('protocol', protocol.toLowerCase());\n  },\n\n  /**\n   * @deprecated will be removed in a future major version. Use the config object instead:\n   *\n   * const stripe = new Stripe(API_KEY, {\n   *   port: 3000,\n   * });\n   *\n   */\n  setPort(port) {\n    emitWarning(\n      '`setPort` is deprecated. Use the `port` config option instead.'\n    );\n    this._setApiField('port', port);\n  },\n\n  /**\n   * @deprecated will be removed in a future major version. Use the config object instead:\n   *\n   * const stripe = new Stripe(API_KEY, {\n   *   apiVersion: API_VERSION,\n   * });\n   *\n   */\n  setApiVersion(version) {\n    emitWarning(\n      '`setApiVersion` is deprecated. Use the `apiVersion` config or request option instead.'\n    );\n    if (version) {\n      this._setApiField('version', version);\n    }\n  },\n\n  /**\n   * @deprecated will be removed in a future major version. Use the config object instead:\n   *\n   * const stripe = new Stripe(API_KEY);\n   *\n   * Or, for Stripe Connect, use `stripeAccount` instead:\n   *\n   * const stripe = new Stripe(API_KEY, {\n   *   stripeAccount: 'acct_...',\n   * });\n   *\n   * Or, to use a different apiKey on a given request:\n   *\n   * stripe.customers.create(params, {apiKey: 'sk_test_...'});\n   */\n  setApiKey(key) {\n    emitWarning(\n      '`setApiKey` is deprecated. Use the `apiKey` request option instead.'\n    );\n    this._setApiKey(key);\n  },\n\n  /**\n   * @private\n   */\n  _setApiKey(key) {\n    if (key) {\n      this._setApiField('auth', `Bearer ${key}`);\n    }\n  },\n\n  /**\n   * @deprecated will be removed in a future major version. Use the config object instead:\n   *\n   * const stripe = new Stripe(API_KEY, {\n   *   timeout: TIMEOUT_MS,\n   * });\n   */\n  setTimeout(timeout) {\n    emitWarning(\n      '`setTimeout` is deprecated. Use the `timeout` config or request option instead.'\n    );\n    this._setApiField('timeout', timeout == null ? DEFAULT_TIMEOUT : timeout);\n  },\n\n  /**\n   * @deprecated will be removed in a future major version. Use the config object instead:\n   *\n   * const stripe = new Stripe(API_KEY, {\n   *   appInfo: {\n   *     name: 'MyPlugin',\n   *     version: '1.4.2',\n   *     url: 'https://myplugin.com',\n   *     partner_id: '1234',\n   *   },\n   * });\n   */\n  setAppInfo(info) {\n    emitWarning(\n      '`setAppInfo` is deprecated. Use the `appInfo` config option instead.'\n    );\n    this._setAppInfo(info);\n  },\n\n  /**\n   * @private\n   * This may be removed in the future.\n   */\n  _setAppInfo(info) {\n    if (info && typeof info !== 'object') {\n      throw new Error('AppInfo must be an object.');\n    }\n\n    if (info && !info.name) {\n      throw new Error('AppInfo.name is required');\n    }\n\n    info = info || {};\n\n    const appInfo = APP_INFO_PROPERTIES.reduce((accum, prop) => {\n      if (typeof info[prop] == 'string') {\n        accum = accum || {};\n\n        accum[prop] = info[prop];\n      }\n\n      return accum;\n    }, undefined);\n\n    this._appInfo = appInfo;\n  },\n\n  /**\n   * @deprecated will be removed in a future major version. Use the config object instead:\n   *\n   * const ProxyAgent = require('https-proxy-agent');\n   * const stripe = new Stripe(API_KEY, {\n   *   httpAgent: new ProxyAgent(process.env.http_proxy),\n   * });\n   *\n   */\n  setHttpAgent(agent) {\n    emitWarning(\n      '`setHttpAgent` is deprecated. Use the `httpAgent` config option instead.'\n    );\n    this._setApiField('agent', agent);\n  },\n\n  /**\n   * @private\n   * This may be removed in the future.\n   */\n  _setApiField(key, value) {\n    this._api[key] = value;\n  },\n\n  /**\n   * @private\n   * Please open or upvote an issue at github.com/stripe/stripe-node\n   * if you use this, detailing your use-case.\n   *\n   * It may be deprecated and removed in the future.\n   */\n  getApiField(key) {\n    return this._api[key];\n  },\n\n  setClientId(clientId) {\n    this._clientId = clientId;\n  },\n\n  getClientId() {\n    return this._clientId;\n  },\n\n  /**\n   * @private\n   * Please open or upvote an issue at github.com/stripe/stripe-node\n   * if you use this, detailing your use-case.\n   *\n   * It may be deprecated and removed in the future.\n   */\n  getConstant: (c) => {\n    switch (c) {\n      case 'DEFAULT_HOST':\n        return DEFAULT_HOST;\n      case 'DEFAULT_PORT':\n        return DEFAULT_PORT;\n      case 'DEFAULT_BASE_PATH':\n        return DEFAULT_BASE_PATH;\n      case 'DEFAULT_API_VERSION':\n        return DEFAULT_API_VERSION;\n      case 'DEFAULT_TIMEOUT':\n        return DEFAULT_TIMEOUT;\n      case 'MAX_NETWORK_RETRY_DELAY_SEC':\n        return MAX_NETWORK_RETRY_DELAY_SEC;\n      case 'INITIAL_NETWORK_RETRY_DELAY_SEC':\n        return INITIAL_NETWORK_RETRY_DELAY_SEC;\n    }\n    return Stripe[c];\n  },\n\n  getMaxNetworkRetries() {\n    return this.getApiField('maxNetworkRetries');\n  },\n\n  /**\n   * @deprecated will be removed in a future major version. Use the config object instead:\n   *\n   * const stripe = new Stripe(API_KEY, {\n   *   maxNetworkRetries: 2,\n   * });\n   *\n   */\n  setMaxNetworkRetries(maxNetworkRetries) {\n    this._setApiNumberField('maxNetworkRetries', maxNetworkRetries);\n  },\n\n  /**\n   * @private\n   * This may be removed in the future.\n   */\n  _setApiNumberField(prop, n, defaultVal) {\n    const val = utils.validateInteger(prop, n, defaultVal);\n\n    this._setApiField(prop, val);\n  },\n\n  getMaxNetworkRetryDelay() {\n    return MAX_NETWORK_RETRY_DELAY_SEC;\n  },\n\n  getInitialNetworkRetryDelay() {\n    return INITIAL_NETWORK_RETRY_DELAY_SEC;\n  },\n\n  /**\n   * @private\n   */\n  getUname(cb) {\n    if (!Stripe._UNAME_CACHE) {\n      Stripe._UNAME_CACHE = new Promise((resolve) => {\n        utils.safeExec('uname -a', (err, uname) => {\n          resolve(uname);\n        });\n      });\n    }\n    Stripe._UNAME_CACHE.then((uname) => cb(uname));\n  },\n\n  /**\n   * @private\n   * Please open or upvote an issue at github.com/stripe/stripe-node\n   * if you use this, detailing your use-case.\n   *\n   * It may be deprecated and removed in the future.\n   *\n   * Gets a JSON version of a User-Agent and uses a cached version for a slight\n   * speed advantage.\n   */\n  getClientUserAgent(cb) {\n    return this.getClientUserAgentSeeded(Stripe.USER_AGENT, cb);\n  },\n\n  /**\n   * @private\n   * Please open or upvote an issue at github.com/stripe/stripe-node\n   * if you use this, detailing your use-case.\n   *\n   * It may be deprecated and removed in the future.\n   *\n   * Gets a JSON version of a User-Agent by encoding a seeded object and\n   * fetching a uname from the system.\n   */\n  getClientUserAgentSeeded(seed, cb) {\n    this.getUname((uname) => {\n      const userAgent = {};\n      for (const field in seed) {\n        userAgent[field] = encodeURIComponent(seed[field]);\n      }\n\n      // URI-encode in case there are unusual characters in the system's uname.\n      userAgent.uname = encodeURIComponent(uname || 'UNKNOWN');\n\n      const client = this.getApiField('httpClient');\n      if (client) {\n        userAgent.httplib = encodeURIComponent(client.getClientName());\n      }\n\n      if (this._appInfo) {\n        userAgent.application = this._appInfo;\n      }\n\n      cb(JSON.stringify(userAgent));\n    });\n  },\n\n  /**\n   * @private\n   * Please open or upvote an issue at github.com/stripe/stripe-node\n   * if you use this, detailing your use-case.\n   *\n   * It may be deprecated and removed in the future.\n   */\n  getAppInfoAsString() {\n    if (!this._appInfo) {\n      return '';\n    }\n\n    let formatted = this._appInfo.name;\n\n    if (this._appInfo.version) {\n      formatted += `/${this._appInfo.version}`;\n    }\n\n    if (this._appInfo.url) {\n      formatted += ` (${this._appInfo.url})`;\n    }\n\n    return formatted;\n  },\n\n  /**\n   * @deprecated will be removed in a future major version. Use the config object instead:\n   *\n   * const stripe = new Stripe(API_KEY, {\n   *   telemetry: false,\n   * });\n   *\n   */\n  setTelemetryEnabled(enableTelemetry) {\n    emitWarning(\n      '`setTelemetryEnabled` is deprecated. Use the `telemetry` config option instead.'\n    );\n    this._enableTelemetry = enableTelemetry;\n  },\n\n  getTelemetryEnabled() {\n    return this._enableTelemetry;\n  },\n\n  /**\n   * @private\n   * This may be removed in the future.\n   */\n  _prepResources() {\n    for (const name in resources) {\n      this[utils.pascalToCamelCase(name)] = new resources[name](this);\n    }\n  },\n\n  /**\n   * @private\n   * This may be removed in the future.\n   */\n  _getPropsFromConfig(config) {\n    // If config is null or undefined, just bail early with no props\n    if (!config) {\n      return {};\n    }\n\n    // config can be an object or a string\n    const isString = typeof config === 'string';\n    const isObject = config === Object(config) && !Array.isArray(config);\n\n    if (!isObject && !isString) {\n      throw new Error('Config must either be an object or a string');\n    }\n\n    // If config is a string, we assume the old behavior of passing in a string representation of the api version\n    if (isString) {\n      return {\n        apiVersion: config,\n      };\n    }\n\n    // If config is an object, we assume the new behavior and make sure it doesn't contain any unexpected values\n    const values = Object.keys(config).filter(\n      (value) => !ALLOWED_CONFIG_PROPERTIES.includes(value)\n    );\n\n    if (values.length > 0) {\n      throw new Error(\n        `Config object may only contain the following: ${ALLOWED_CONFIG_PROPERTIES.join(\n          ', '\n        )}`\n      );\n    }\n\n    return config;\n  },\n};\n\nmodule.exports = Stripe;\n\n// expose constructor as a named property to enable mocking with Sinon.JS\nmodule.exports.Stripe = Stripe;\n\n// Allow use with the TypeScript compiler without `esModuleInterop`.\n// We may also want to add `Object.defineProperty(exports, \"__esModule\", {value: true});` in the future, so that Babel users will use the `default` version.\nmodule.exports.default = Stripe;\n"]},"metadata":{},"sourceType":"script"}