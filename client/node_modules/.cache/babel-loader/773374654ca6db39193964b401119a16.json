{"ast":null,"code":"'use strict';\n\nconst makeRequest = require('./makeRequest');\n\nconst utils = require('./utils');\n\nfunction makeAutoPaginationMethods(self, requestArgs, spec, firstPagePromise) {\n  const promiseCache = {\n    currentPromise: null\n  };\n  const reverseIteration = isReverseIteration(requestArgs);\n  let pagePromise = firstPagePromise;\n  let i = 0; // Search and List methods iterate differently.\n  // Search relies on a `next_page` token and can only iterate in one direction.\n  // List relies on either an `ending_before` or `starting_after` field with\n  // an item ID to paginate and is bi-directional.\n  //\n  // Please note: spec.methodType === 'search' is beta functionality and is\n  // subject to change/removal at any time.\n\n  let getNextPagePromise;\n\n  if (spec.methodType === 'search') {\n    getNextPagePromise = pageResult => {\n      if (!pageResult.next_page) {\n        throw Error('Unexpected: Stripe API response does not have a well-formed `next_page` field, but `has_more` was true.');\n      }\n\n      return makeRequest(self, requestArgs, spec, {\n        next_page: pageResult.next_page\n      });\n    };\n  } else {\n    getNextPagePromise = pageResult => {\n      const lastId = getLastId(pageResult, reverseIteration);\n      return makeRequest(self, requestArgs, spec, {\n        [reverseIteration ? 'ending_before' : 'starting_after']: lastId\n      });\n    };\n  }\n\n  function iterate(pageResult) {\n    if (!(pageResult && pageResult.data && typeof pageResult.data.length === 'number')) {\n      throw Error('Unexpected: Stripe API response does not have a well-formed `data` array.');\n    }\n\n    if (i < pageResult.data.length) {\n      const idx = reverseIteration ? pageResult.data.length - 1 - i : i;\n      const value = pageResult.data[idx];\n      i += 1;\n      return {\n        value,\n        done: false\n      };\n    } else if (pageResult.has_more) {\n      // Reset counter, request next page, and recurse.\n      i = 0;\n      pagePromise = getNextPagePromise(pageResult);\n      return pagePromise.then(iterate);\n    }\n\n    return {\n      value: undefined,\n      done: true\n    };\n  }\n\n  function asyncIteratorNext() {\n    return memoizedPromise(promiseCache, (resolve, reject) => {\n      return pagePromise.then(iterate).then(resolve).catch(reject);\n    });\n  }\n\n  const autoPagingEach = makeAutoPagingEach(asyncIteratorNext);\n  const autoPagingToArray = makeAutoPagingToArray(autoPagingEach);\n  const autoPaginationMethods = {\n    autoPagingEach,\n    autoPagingToArray,\n    // Async iterator functions:\n    next: asyncIteratorNext,\n    return: () => {\n      // This is required for `break`.\n      return {};\n    },\n    [getAsyncIteratorSymbol()]: () => {\n      return autoPaginationMethods;\n    }\n  };\n  return autoPaginationMethods;\n}\n\nmodule.exports.makeAutoPaginationMethods = makeAutoPaginationMethods;\n/**\n * ----------------\n * Private Helpers:\n * ----------------\n */\n\nfunction getAsyncIteratorSymbol() {\n  if (typeof Symbol !== 'undefined' && Symbol.asyncIterator) {\n    return Symbol.asyncIterator;\n  } // Follow the convention from libraries like iterall: https://github.com/leebyron/iterall#asynciterator-1\n\n\n  return '@@asyncIterator';\n}\n\nfunction getDoneCallback(args) {\n  if (args.length < 2) {\n    return undefined;\n  }\n\n  const onDone = args[1];\n\n  if (typeof onDone !== 'function') {\n    throw Error(`The second argument to autoPagingEach, if present, must be a callback function; received ${typeof onDone}`);\n  }\n\n  return onDone;\n}\n/**\n * We allow four forms of the `onItem` callback (the middle two being equivalent),\n *\n *   1. `.autoPagingEach((item) => { doSomething(item); return false; });`\n *   2. `.autoPagingEach(async (item) => { await doSomething(item); return false; });`\n *   3. `.autoPagingEach((item) => doSomething(item).then(() => false));`\n *   4. `.autoPagingEach((item, next) => { doSomething(item); next(false); });`\n *\n * In addition to standard validation, this helper\n * coalesces the former forms into the latter form.\n */\n\n\nfunction getItemCallback(args) {\n  if (args.length === 0) {\n    return undefined;\n  }\n\n  const onItem = args[0];\n\n  if (typeof onItem !== 'function') {\n    throw Error(`The first argument to autoPagingEach, if present, must be a callback function; received ${typeof onItem}`);\n  } // 4. `.autoPagingEach((item, next) => { doSomething(item); next(false); });`\n\n\n  if (onItem.length === 2) {\n    return onItem;\n  }\n\n  if (onItem.length > 2) {\n    throw Error(`The \\`onItem\\` callback function passed to autoPagingEach must accept at most two arguments; got ${onItem}`);\n  } // This magically handles all three of these usecases (the latter two being functionally identical):\n  // 1. `.autoPagingEach((item) => { doSomething(item); return false; });`\n  // 2. `.autoPagingEach(async (item) => { await doSomething(item); return false; });`\n  // 3. `.autoPagingEach((item) => doSomething(item).then(() => false));`\n\n\n  return function _onItem(item, next) {\n    const shouldContinue = onItem(item);\n    next(shouldContinue);\n  };\n}\n\nfunction getLastId(listResult, reverseIteration) {\n  const lastIdx = reverseIteration ? 0 : listResult.data.length - 1;\n  const lastItem = listResult.data[lastIdx];\n  const lastId = lastItem && lastItem.id;\n\n  if (!lastId) {\n    throw Error('Unexpected: No `id` found on the last item while auto-paging a list.');\n  }\n\n  return lastId;\n}\n/**\n * If a user calls `.next()` multiple times in parallel,\n * return the same result until something has resolved\n * to prevent page-turning race conditions.\n */\n\n\nfunction memoizedPromise(promiseCache, cb) {\n  if (promiseCache.currentPromise) {\n    return promiseCache.currentPromise;\n  }\n\n  promiseCache.currentPromise = new Promise(cb).then(ret => {\n    promiseCache.currentPromise = undefined;\n    return ret;\n  });\n  return promiseCache.currentPromise;\n}\n\nfunction makeAutoPagingEach(asyncIteratorNext) {\n  return function autoPagingEach() {\n    const args = [].slice.call(arguments);\n    const onItem = getItemCallback(args);\n    const onDone = getDoneCallback(args);\n\n    if (args.length > 2) {\n      throw Error(`autoPagingEach takes up to two arguments; received ${args}`);\n    }\n\n    const autoPagePromise = wrapAsyncIteratorWithCallback(asyncIteratorNext, onItem);\n    return utils.callbackifyPromiseWithTimeout(autoPagePromise, onDone);\n  };\n}\n\nfunction makeAutoPagingToArray(autoPagingEach) {\n  return function autoPagingToArray(opts, onDone) {\n    const limit = opts && opts.limit;\n\n    if (!limit) {\n      throw Error('You must pass a `limit` option to autoPagingToArray, e.g., `autoPagingToArray({limit: 1000});`.');\n    }\n\n    if (limit > 10000) {\n      throw Error('You cannot specify a limit of more than 10,000 items to fetch in `autoPagingToArray`; use `autoPagingEach` to iterate through longer lists.');\n    }\n\n    const promise = new Promise((resolve, reject) => {\n      const items = [];\n      autoPagingEach(item => {\n        items.push(item);\n\n        if (items.length >= limit) {\n          return false;\n        }\n      }).then(() => {\n        resolve(items);\n      }).catch(reject);\n    });\n    return utils.callbackifyPromiseWithTimeout(promise, onDone);\n  };\n}\n\nfunction wrapAsyncIteratorWithCallback(asyncIteratorNext, onItem) {\n  return new Promise((resolve, reject) => {\n    function handleIteration(iterResult) {\n      if (iterResult.done) {\n        resolve();\n        return;\n      }\n\n      const item = iterResult.value;\n      return new Promise(next => {\n        // Bit confusing, perhaps; we pass a `resolve` fn\n        // to the user, so they can decide when and if to continue.\n        // They can return false, or a promise which resolves to false, to break.\n        onItem(item, next);\n      }).then(shouldContinue => {\n        if (shouldContinue === false) {\n          return handleIteration({\n            done: true\n          });\n        } else {\n          return asyncIteratorNext().then(handleIteration);\n        }\n      });\n    }\n\n    asyncIteratorNext().then(handleIteration).catch(reject);\n  });\n}\n\nfunction isReverseIteration(requestArgs) {\n  const args = [].slice.call(requestArgs);\n  const dataFromArgs = utils.getDataFromArgs(args);\n  return !!dataFromArgs.ending_before;\n}","map":{"version":3,"sources":["/Volumes/Time Machine Backups/Art/my-art/node_modules/stripe/lib/autoPagination.js"],"names":["makeRequest","require","utils","makeAutoPaginationMethods","self","requestArgs","spec","firstPagePromise","promiseCache","currentPromise","reverseIteration","isReverseIteration","pagePromise","i","getNextPagePromise","methodType","pageResult","next_page","Error","lastId","getLastId","iterate","data","length","idx","value","done","has_more","then","undefined","asyncIteratorNext","memoizedPromise","resolve","reject","catch","autoPagingEach","makeAutoPagingEach","autoPagingToArray","makeAutoPagingToArray","autoPaginationMethods","next","return","getAsyncIteratorSymbol","module","exports","Symbol","asyncIterator","getDoneCallback","args","onDone","getItemCallback","onItem","_onItem","item","shouldContinue","listResult","lastIdx","lastItem","id","cb","Promise","ret","slice","call","arguments","autoPagePromise","wrapAsyncIteratorWithCallback","callbackifyPromiseWithTimeout","opts","limit","promise","items","push","handleIteration","iterResult","dataFromArgs","getDataFromArgs","ending_before"],"mappings":"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","sourcesContent":["'use strict';\n\nconst makeRequest = require('./makeRequest');\nconst utils = require('./utils');\n\nfunction makeAutoPaginationMethods(self, requestArgs, spec, firstPagePromise) {\n  const promiseCache = {currentPromise: null};\n  const reverseIteration = isReverseIteration(requestArgs);\n  let pagePromise = firstPagePromise;\n  let i = 0;\n\n  // Search and List methods iterate differently.\n  // Search relies on a `next_page` token and can only iterate in one direction.\n  // List relies on either an `ending_before` or `starting_after` field with\n  // an item ID to paginate and is bi-directional.\n  //\n  // Please note: spec.methodType === 'search' is beta functionality and is\n  // subject to change/removal at any time.\n  let getNextPagePromise;\n  if (spec.methodType === 'search') {\n    getNextPagePromise = (pageResult) => {\n      if (!pageResult.next_page) {\n        throw Error(\n          'Unexpected: Stripe API response does not have a well-formed `next_page` field, but `has_more` was true.'\n        );\n      }\n      return makeRequest(self, requestArgs, spec, {\n        next_page: pageResult.next_page,\n      });\n    };\n  } else {\n    getNextPagePromise = (pageResult) => {\n      const lastId = getLastId(pageResult, reverseIteration);\n      return makeRequest(self, requestArgs, spec, {\n        [reverseIteration ? 'ending_before' : 'starting_after']: lastId,\n      });\n    };\n  }\n\n  function iterate(pageResult) {\n    if (\n      !(\n        pageResult &&\n        pageResult.data &&\n        typeof pageResult.data.length === 'number'\n      )\n    ) {\n      throw Error(\n        'Unexpected: Stripe API response does not have a well-formed `data` array.'\n      );\n    }\n\n    if (i < pageResult.data.length) {\n      const idx = reverseIteration ? pageResult.data.length - 1 - i : i;\n      const value = pageResult.data[idx];\n      i += 1;\n\n      return {value, done: false};\n    } else if (pageResult.has_more) {\n      // Reset counter, request next page, and recurse.\n      i = 0;\n      pagePromise = getNextPagePromise(pageResult);\n      return pagePromise.then(iterate);\n    }\n    return {value: undefined, done: true};\n  }\n\n  function asyncIteratorNext() {\n    return memoizedPromise(promiseCache, (resolve, reject) => {\n      return pagePromise\n        .then(iterate)\n        .then(resolve)\n        .catch(reject);\n    });\n  }\n\n  const autoPagingEach = makeAutoPagingEach(asyncIteratorNext);\n  const autoPagingToArray = makeAutoPagingToArray(autoPagingEach);\n\n  const autoPaginationMethods = {\n    autoPagingEach,\n    autoPagingToArray,\n\n    // Async iterator functions:\n    next: asyncIteratorNext,\n    return: () => {\n      // This is required for `break`.\n      return {};\n    },\n    [getAsyncIteratorSymbol()]: () => {\n      return autoPaginationMethods;\n    },\n  };\n  return autoPaginationMethods;\n}\n\nmodule.exports.makeAutoPaginationMethods = makeAutoPaginationMethods;\n\n/**\n * ----------------\n * Private Helpers:\n * ----------------\n */\n\nfunction getAsyncIteratorSymbol() {\n  if (typeof Symbol !== 'undefined' && Symbol.asyncIterator) {\n    return Symbol.asyncIterator;\n  }\n  // Follow the convention from libraries like iterall: https://github.com/leebyron/iterall#asynciterator-1\n  return '@@asyncIterator';\n}\n\nfunction getDoneCallback(args) {\n  if (args.length < 2) {\n    return undefined;\n  }\n  const onDone = args[1];\n  if (typeof onDone !== 'function') {\n    throw Error(\n      `The second argument to autoPagingEach, if present, must be a callback function; received ${typeof onDone}`\n    );\n  }\n  return onDone;\n}\n\n/**\n * We allow four forms of the `onItem` callback (the middle two being equivalent),\n *\n *   1. `.autoPagingEach((item) => { doSomething(item); return false; });`\n *   2. `.autoPagingEach(async (item) => { await doSomething(item); return false; });`\n *   3. `.autoPagingEach((item) => doSomething(item).then(() => false));`\n *   4. `.autoPagingEach((item, next) => { doSomething(item); next(false); });`\n *\n * In addition to standard validation, this helper\n * coalesces the former forms into the latter form.\n */\nfunction getItemCallback(args) {\n  if (args.length === 0) {\n    return undefined;\n  }\n  const onItem = args[0];\n  if (typeof onItem !== 'function') {\n    throw Error(\n      `The first argument to autoPagingEach, if present, must be a callback function; received ${typeof onItem}`\n    );\n  }\n\n  // 4. `.autoPagingEach((item, next) => { doSomething(item); next(false); });`\n  if (onItem.length === 2) {\n    return onItem;\n  }\n\n  if (onItem.length > 2) {\n    throw Error(\n      `The \\`onItem\\` callback function passed to autoPagingEach must accept at most two arguments; got ${onItem}`\n    );\n  }\n\n  // This magically handles all three of these usecases (the latter two being functionally identical):\n  // 1. `.autoPagingEach((item) => { doSomething(item); return false; });`\n  // 2. `.autoPagingEach(async (item) => { await doSomething(item); return false; });`\n  // 3. `.autoPagingEach((item) => doSomething(item).then(() => false));`\n  return function _onItem(item, next) {\n    const shouldContinue = onItem(item);\n    next(shouldContinue);\n  };\n}\n\nfunction getLastId(listResult, reverseIteration) {\n  const lastIdx = reverseIteration ? 0 : listResult.data.length - 1;\n  const lastItem = listResult.data[lastIdx];\n  const lastId = lastItem && lastItem.id;\n  if (!lastId) {\n    throw Error(\n      'Unexpected: No `id` found on the last item while auto-paging a list.'\n    );\n  }\n  return lastId;\n}\n\n/**\n * If a user calls `.next()` multiple times in parallel,\n * return the same result until something has resolved\n * to prevent page-turning race conditions.\n */\nfunction memoizedPromise(promiseCache, cb) {\n  if (promiseCache.currentPromise) {\n    return promiseCache.currentPromise;\n  }\n  promiseCache.currentPromise = new Promise(cb).then((ret) => {\n    promiseCache.currentPromise = undefined;\n    return ret;\n  });\n  return promiseCache.currentPromise;\n}\n\nfunction makeAutoPagingEach(asyncIteratorNext) {\n  return function autoPagingEach(/* onItem?, onDone? */) {\n    const args = [].slice.call(arguments);\n    const onItem = getItemCallback(args);\n    const onDone = getDoneCallback(args);\n    if (args.length > 2) {\n      throw Error(`autoPagingEach takes up to two arguments; received ${args}`);\n    }\n\n    const autoPagePromise = wrapAsyncIteratorWithCallback(\n      asyncIteratorNext,\n      onItem\n    );\n    return utils.callbackifyPromiseWithTimeout(autoPagePromise, onDone);\n  };\n}\n\nfunction makeAutoPagingToArray(autoPagingEach) {\n  return function autoPagingToArray(opts, onDone) {\n    const limit = opts && opts.limit;\n    if (!limit) {\n      throw Error(\n        'You must pass a `limit` option to autoPagingToArray, e.g., `autoPagingToArray({limit: 1000});`.'\n      );\n    }\n    if (limit > 10000) {\n      throw Error(\n        'You cannot specify a limit of more than 10,000 items to fetch in `autoPagingToArray`; use `autoPagingEach` to iterate through longer lists.'\n      );\n    }\n    const promise = new Promise((resolve, reject) => {\n      const items = [];\n      autoPagingEach((item) => {\n        items.push(item);\n        if (items.length >= limit) {\n          return false;\n        }\n      })\n        .then(() => {\n          resolve(items);\n        })\n        .catch(reject);\n    });\n    return utils.callbackifyPromiseWithTimeout(promise, onDone);\n  };\n}\n\nfunction wrapAsyncIteratorWithCallback(asyncIteratorNext, onItem) {\n  return new Promise((resolve, reject) => {\n    function handleIteration(iterResult) {\n      if (iterResult.done) {\n        resolve();\n        return;\n      }\n\n      const item = iterResult.value;\n      return new Promise((next) => {\n        // Bit confusing, perhaps; we pass a `resolve` fn\n        // to the user, so they can decide when and if to continue.\n        // They can return false, or a promise which resolves to false, to break.\n        onItem(item, next);\n      }).then((shouldContinue) => {\n        if (shouldContinue === false) {\n          return handleIteration({done: true});\n        } else {\n          return asyncIteratorNext().then(handleIteration);\n        }\n      });\n    }\n\n    asyncIteratorNext()\n      .then(handleIteration)\n      .catch(reject);\n  });\n}\n\nfunction isReverseIteration(requestArgs) {\n  const args = [].slice.call(requestArgs);\n  const dataFromArgs = utils.getDataFromArgs(args);\n\n  return !!dataFromArgs.ending_before;\n}\n"]},"metadata":{},"sourceType":"script"}