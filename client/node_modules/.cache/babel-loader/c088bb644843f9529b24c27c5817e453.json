{"ast":null,"code":"'use strict';\n\nconst path = require('path');\n\nconst utils = require('./utils');\n\nconst {\n  StripeConnectionError,\n  StripeAuthenticationError,\n  StripePermissionError,\n  StripeRateLimitError,\n  StripeError,\n  StripeAPIError\n} = require('./Error');\n\nconst HttpClient = require('./net/HttpClient'); // Provide extension mechanism for Stripe Resource Sub-Classes\n\n\nStripeResource.extend = utils.protoExtend; // Expose method-creator & prepared (basic) methods\n\nStripeResource.method = require('./StripeMethod');\nStripeResource.BASIC_METHODS = require('./StripeMethod.basic');\nStripeResource.MAX_BUFFERED_REQUEST_METRICS = 100;\nconst MAX_RETRY_AFTER_WAIT = 60;\n/**\n * Encapsulates request logic for a Stripe Resource\n */\n\nfunction StripeResource(stripe, deprecatedUrlData) {\n  this._stripe = stripe;\n\n  if (deprecatedUrlData) {\n    throw new Error('Support for curried url params was dropped in stripe-node v7.0.0. Instead, pass two ids.');\n  }\n\n  this.basePath = utils.makeURLInterpolator(this.basePath || stripe.getApiField('basePath'));\n  this.resourcePath = this.path;\n  this.path = utils.makeURLInterpolator(this.path); // DEPRECATED: This was kept for backwards compatibility in case users were\n  // using this, but basic methods are now explicitly defined on a resource.\n\n  if (this.includeBasic) {\n    this.includeBasic.forEach(function (methodName) {\n      this[methodName] = StripeResource.BASIC_METHODS[methodName];\n    }, this);\n  }\n\n  this.initialize(...arguments);\n}\n\nStripeResource.prototype = {\n  path: '',\n  // Methods that don't use the API's default '/v1' path can override it with this setting.\n  basePath: null,\n\n  initialize() {},\n\n  // Function to override the default data processor. This allows full control\n  // over how a StripeResource's request data will get converted into an HTTP\n  // body. This is useful for non-standard HTTP requests. The function should\n  // take method name, data, and headers as arguments.\n  requestDataProcessor: null,\n  // Function to add a validation checks before sending the request, errors should\n  // be thrown, and they will be passed to the callback/promise.\n  validateRequest: null,\n\n  createFullPath(commandPath, urlData) {\n    return path.join(this.basePath(urlData), this.path(urlData), typeof commandPath == 'function' ? commandPath(urlData) : commandPath).replace(/\\\\/g, '/'); // ugly workaround for Windows\n  },\n\n  // Creates a relative resource path with symbols left in (unlike\n  // createFullPath which takes some data to replace them with). For example it\n  // might produce: /invoices/{id}\n  createResourcePathWithSymbols(pathWithSymbols) {\n    return `/${path.join(this.resourcePath, pathWithSymbols || '').replace(/\\\\/g, '/')}`; // ugly workaround for Windows\n  },\n\n  // DEPRECATED: Here for backcompat in case users relied on this.\n  wrapTimeout: utils.callbackifyPromiseWithTimeout,\n\n  _timeoutHandler(timeout, req, callback) {\n    return () => {\n      const timeoutErr = new TypeError('ETIMEDOUT');\n      timeoutErr.code = 'ETIMEDOUT';\n      req.destroy(timeoutErr);\n    };\n  },\n\n  _addHeadersDirectlyToObject(obj, headers) {\n    // For convenience, make some headers easily accessible on\n    // lastResponse.\n    // NOTE: Stripe responds with lowercase header names/keys.\n    obj.requestId = headers['request-id'];\n    obj.stripeAccount = obj.stripeAccount || headers['stripe-account'];\n    obj.apiVersion = obj.apiVersion || headers['stripe-version'];\n    obj.idempotencyKey = obj.idempotencyKey || headers['idempotency-key'];\n  },\n\n  _makeResponseEvent(requestEvent, statusCode, headers) {\n    const requestEndTime = Date.now();\n    const requestDurationMs = requestEndTime - requestEvent.request_start_time;\n    return utils.removeNullish({\n      api_version: headers['stripe-version'],\n      account: headers['stripe-account'],\n      idempotency_key: headers['idempotency-key'],\n      method: requestEvent.method,\n      path: requestEvent.path,\n      status: statusCode,\n      request_id: this._getRequestId(headers),\n      elapsed: requestDurationMs,\n      request_start_time: requestEvent.request_start_time,\n      request_end_time: requestEndTime\n    });\n  },\n\n  _getRequestId(headers) {\n    return headers['request-id'];\n  },\n\n  /**\n   * Used by methods with spec.streaming === true. For these methods, we do not\n   * buffer successful responses into memory or do parse them into stripe\n   * objects, we delegate that all of that to the user and pass back the raw\n   * http.Response object to the callback.\n   *\n   * (Unsuccessful responses shouldn't make it here, they should\n   * still be buffered/parsed and handled by _jsonResponseHandler -- see\n   * makeRequest)\n   */\n  _streamingResponseHandler(requestEvent, callback) {\n    return res => {\n      const headers = res.getHeaders();\n\n      const streamCompleteCallback = () => {\n        const responseEvent = this._makeResponseEvent(requestEvent, res.getStatusCode(), headers);\n\n        this._stripe._emitter.emit('response', responseEvent);\n\n        this._recordRequestMetrics(this._getRequestId(headers), responseEvent.elapsed);\n      };\n\n      const stream = res.toStream(streamCompleteCallback); // This is here for backwards compatibility, as the stream is a raw\n      // HTTP response in Node and the legacy behavior was to mutate this\n      // response.\n\n      this._addHeadersDirectlyToObject(stream, headers);\n\n      return callback(null, stream);\n    };\n  },\n\n  /**\n   * Default handler for Stripe responses. Buffers the response into memory,\n   * parses the JSON and returns it (i.e. passes it to the callback) if there\n   * is no \"error\" field. Otherwise constructs/passes an appropriate Error.\n   */\n  _jsonResponseHandler(requestEvent, callback) {\n    return res => {\n      const headers = res.getHeaders();\n\n      const requestId = this._getRequestId(headers);\n\n      const statusCode = res.getStatusCode();\n\n      const responseEvent = this._makeResponseEvent(requestEvent, statusCode, headers);\n\n      this._stripe._emitter.emit('response', responseEvent);\n\n      res.toJSON().then(jsonResponse => {\n        if (jsonResponse.error) {\n          let err; // Convert OAuth error responses into a standard format\n          // so that the rest of the error logic can be shared\n\n          if (typeof jsonResponse.error === 'string') {\n            jsonResponse.error = {\n              type: jsonResponse.error,\n              message: jsonResponse.error_description\n            };\n          }\n\n          jsonResponse.error.headers = headers;\n          jsonResponse.error.statusCode = statusCode;\n          jsonResponse.error.requestId = requestId;\n\n          if (statusCode === 401) {\n            err = new StripeAuthenticationError(jsonResponse.error);\n          } else if (statusCode === 403) {\n            err = new StripePermissionError(jsonResponse.error);\n          } else if (statusCode === 429) {\n            err = new StripeRateLimitError(jsonResponse.error);\n          } else {\n            err = StripeError.generate(jsonResponse.error);\n          }\n\n          throw err;\n        }\n\n        return jsonResponse;\n      }, e => {\n        throw new StripeAPIError({\n          message: 'Invalid JSON received from the Stripe API',\n          exception: e,\n          requestId: headers['request-id']\n        });\n      }).then(jsonResponse => {\n        this._recordRequestMetrics(requestId, responseEvent.elapsed); // Expose raw response object.\n\n\n        const rawResponse = res.getRawResponse();\n\n        this._addHeadersDirectlyToObject(rawResponse, headers);\n\n        Object.defineProperty(jsonResponse, 'lastResponse', {\n          enumerable: false,\n          writable: false,\n          value: rawResponse\n        });\n        callback.call(this, null, jsonResponse);\n      }, e => callback.call(this, e, null));\n    };\n  },\n\n  _generateConnectionErrorMessage(requestRetries) {\n    return `An error occurred with our connection to Stripe.${requestRetries > 0 ? ` Request was retried ${requestRetries} times.` : ''}`;\n  },\n\n  _errorHandler(req, requestRetries, callback) {\n    return (message, detail) => {\n      callback.call(this, new StripeConnectionError({\n        message: this._generateConnectionErrorMessage(requestRetries),\n        detail: error\n      }), null);\n    };\n  },\n\n  // For more on when and how to retry API requests, see https://stripe.com/docs/error-handling#safely-retrying-requests-with-idempotency\n  _shouldRetry(res, numRetries, maxRetries) {\n    // Do not retry if we are out of retries.\n    if (numRetries >= maxRetries) {\n      return false;\n    } // Retry on connection error.\n\n\n    if (!res) {\n      return true;\n    } // The API may ask us not to retry (e.g., if doing so would be a no-op)\n    // or advise us to retry (e.g., in cases of lock timeouts); we defer to that.\n\n\n    if (res.getHeaders()['stripe-should-retry'] === 'false') {\n      return false;\n    }\n\n    if (res.getHeaders()['stripe-should-retry'] === 'true') {\n      return true;\n    } // Retry on conflict errors.\n\n\n    if (res.getStatusCode() === 409) {\n      return true;\n    } // Retry on 500, 503, and other internal errors.\n    //\n    // Note that we expect the stripe-should-retry header to be false\n    // in most cases when a 500 is returned, since our idempotency framework\n    // would typically replay it anyway.\n\n\n    if (res.getStatusCode() >= 500) {\n      return true;\n    }\n\n    return false;\n  },\n\n  _getSleepTimeInMS(numRetries, retryAfter = null) {\n    const initialNetworkRetryDelay = this._stripe.getInitialNetworkRetryDelay();\n\n    const maxNetworkRetryDelay = this._stripe.getMaxNetworkRetryDelay(); // Apply exponential backoff with initialNetworkRetryDelay on the\n    // number of numRetries so far as inputs. Do not allow the number to exceed\n    // maxNetworkRetryDelay.\n\n\n    let sleepSeconds = Math.min(initialNetworkRetryDelay * Math.pow(numRetries - 1, 2), maxNetworkRetryDelay); // Apply some jitter by randomizing the value in the range of\n    // (sleepSeconds / 2) to (sleepSeconds).\n\n    sleepSeconds *= 0.5 * (1 + Math.random()); // But never sleep less than the base sleep seconds.\n\n    sleepSeconds = Math.max(initialNetworkRetryDelay, sleepSeconds); // And never sleep less than the time the API asks us to wait, assuming it's a reasonable ask.\n\n    if (Number.isInteger(retryAfter) && retryAfter <= MAX_RETRY_AFTER_WAIT) {\n      sleepSeconds = Math.max(sleepSeconds, retryAfter);\n    }\n\n    return sleepSeconds * 1000;\n  },\n\n  // Max retries can be set on a per request basis. Favor those over the global setting\n  _getMaxNetworkRetries(settings = {}) {\n    return settings.maxNetworkRetries && Number.isInteger(settings.maxNetworkRetries) ? settings.maxNetworkRetries : this._stripe.getMaxNetworkRetries();\n  },\n\n  _defaultIdempotencyKey(method, settings) {\n    // If this is a POST and we allow multiple retries, ensure an idempotency key.\n    const maxRetries = this._getMaxNetworkRetries(settings);\n\n    if (method === 'POST' && maxRetries > 0) {\n      return `stripe-node-retry-${utils.uuid4()}`;\n    }\n\n    return null;\n  },\n\n  _makeHeaders(auth, contentLength, apiVersion, clientUserAgent, method, userSuppliedHeaders, userSuppliedSettings) {\n    const defaultHeaders = {\n      // Use specified auth token or use default from this stripe instance:\n      Authorization: auth ? `Bearer ${auth}` : this._stripe.getApiField('auth'),\n      Accept: 'application/json',\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'Content-Length': contentLength,\n      'User-Agent': this._getUserAgentString(),\n      'X-Stripe-Client-User-Agent': clientUserAgent,\n      'X-Stripe-Client-Telemetry': this._getTelemetryHeader(),\n      'Stripe-Version': apiVersion,\n      'Stripe-Account': this._stripe.getApiField('stripeAccount'),\n      'Idempotency-Key': this._defaultIdempotencyKey(method, userSuppliedSettings)\n    };\n    return Object.assign(utils.removeNullish(defaultHeaders), // If the user supplied, say 'idempotency-key', override instead of appending by ensuring caps are the same.\n    utils.normalizeHeaders(userSuppliedHeaders));\n  },\n\n  _getUserAgentString() {\n    const packageVersion = this._stripe.getConstant('PACKAGE_VERSION');\n\n    const appInfo = this._stripe._appInfo ? this._stripe.getAppInfoAsString() : '';\n    return `Stripe/v1 NodeBindings/${packageVersion} ${appInfo}`.trim();\n  },\n\n  _getTelemetryHeader() {\n    if (this._stripe.getTelemetryEnabled() && this._stripe._prevRequestMetrics.length > 0) {\n      const metrics = this._stripe._prevRequestMetrics.shift();\n\n      return JSON.stringify({\n        last_request_metrics: metrics\n      });\n    }\n  },\n\n  _recordRequestMetrics(requestId, requestDurationMs) {\n    if (this._stripe.getTelemetryEnabled() && requestId) {\n      if (this._stripe._prevRequestMetrics.length > StripeResource.MAX_BUFFERED_REQUEST_METRICS) {\n        utils.emitWarning('Request metrics buffer is full, dropping telemetry message.');\n      } else {\n        this._stripe._prevRequestMetrics.push({\n          request_id: requestId,\n          request_duration_ms: requestDurationMs\n        });\n      }\n    }\n  },\n\n  _request(method, host, path, data, auth, options = {}, callback) {\n    let requestData;\n\n    const retryRequest = (requestFn, apiVersion, headers, requestRetries, retryAfter) => {\n      return setTimeout(requestFn, this._getSleepTimeInMS(requestRetries, retryAfter), apiVersion, headers, requestRetries + 1);\n    };\n\n    const makeRequest = (apiVersion, headers, numRetries) => {\n      // timeout can be set on a per-request basis. Favor that over the global setting\n      const timeout = options.settings && Number.isInteger(options.settings.timeout) && options.settings.timeout >= 0 ? options.settings.timeout : this._stripe.getApiField('timeout');\n\n      const req = this._stripe.getApiField('httpClient').makeRequest(host || this._stripe.getApiField('host'), this._stripe.getApiField('port'), path, method, headers, requestData, this._stripe.getApiField('protocol'), timeout);\n\n      const requestStartTime = Date.now();\n      const requestEvent = utils.removeNullish({\n        api_version: apiVersion,\n        account: headers['Stripe-Account'],\n        idempotency_key: headers['Idempotency-Key'],\n        method,\n        path,\n        request_start_time: requestStartTime\n      });\n      const requestRetries = numRetries || 0;\n\n      const maxRetries = this._getMaxNetworkRetries(options.settings);\n\n      this._stripe._emitter.emit('request', requestEvent);\n\n      req.then(res => {\n        if (this._shouldRetry(res, requestRetries, maxRetries)) {\n          return retryRequest(makeRequest, apiVersion, headers, requestRetries, res.getHeaders()['retry-after']);\n        } else if (options.streaming && res.getStatusCode() < 400) {\n          return this._streamingResponseHandler(requestEvent, callback)(res);\n        } else {\n          return this._jsonResponseHandler(requestEvent, callback)(res);\n        }\n      }).catch(error => {\n        if (this._shouldRetry(null, requestRetries, maxRetries)) {\n          return retryRequest(makeRequest, apiVersion, headers, requestRetries, null);\n        } else {\n          const isTimeoutError = error.code && error.code === HttpClient.TIMEOUT_ERROR_CODE;\n          return callback.call(this, new StripeConnectionError({\n            message: isTimeoutError ? `Request aborted due to timeout being reached (${timeout}ms)` : this._generateConnectionErrorMessage(requestRetries),\n            detail: error\n          }));\n        }\n      });\n    };\n\n    const prepareAndMakeRequest = (error, data) => {\n      if (error) {\n        return callback(error);\n      }\n\n      requestData = data;\n\n      this._stripe.getClientUserAgent(clientUserAgent => {\n        const apiVersion = this._stripe.getApiField('version');\n\n        const headers = this._makeHeaders(auth, requestData.length, apiVersion, clientUserAgent, method, options.headers, options.settings);\n\n        makeRequest(apiVersion, headers);\n      });\n    };\n\n    if (this.requestDataProcessor) {\n      this.requestDataProcessor(method, data, options.headers, prepareAndMakeRequest);\n    } else {\n      prepareAndMakeRequest(null, utils.stringifyRequestData(data || {}));\n    }\n  }\n\n};\nmodule.exports = StripeResource;","map":{"version":3,"sources":["/Volumes/Time Machine Backups/Art/my-art/node_modules/stripe/lib/StripeResource.js"],"names":["path","require","utils","StripeConnectionError","StripeAuthenticationError","StripePermissionError","StripeRateLimitError","StripeError","StripeAPIError","HttpClient","StripeResource","extend","protoExtend","method","BASIC_METHODS","MAX_BUFFERED_REQUEST_METRICS","MAX_RETRY_AFTER_WAIT","stripe","deprecatedUrlData","_stripe","Error","basePath","makeURLInterpolator","getApiField","resourcePath","includeBasic","forEach","methodName","initialize","arguments","prototype","requestDataProcessor","validateRequest","createFullPath","commandPath","urlData","join","replace","createResourcePathWithSymbols","pathWithSymbols","wrapTimeout","callbackifyPromiseWithTimeout","_timeoutHandler","timeout","req","callback","timeoutErr","TypeError","code","destroy","_addHeadersDirectlyToObject","obj","headers","requestId","stripeAccount","apiVersion","idempotencyKey","_makeResponseEvent","requestEvent","statusCode","requestEndTime","Date","now","requestDurationMs","request_start_time","removeNullish","api_version","account","idempotency_key","status","request_id","_getRequestId","elapsed","request_end_time","_streamingResponseHandler","res","getHeaders","streamCompleteCallback","responseEvent","getStatusCode","_emitter","emit","_recordRequestMetrics","stream","toStream","_jsonResponseHandler","toJSON","then","jsonResponse","error","err","type","message","error_description","generate","e","exception","rawResponse","getRawResponse","Object","defineProperty","enumerable","writable","value","call","_generateConnectionErrorMessage","requestRetries","_errorHandler","detail","_shouldRetry","numRetries","maxRetries","_getSleepTimeInMS","retryAfter","initialNetworkRetryDelay","getInitialNetworkRetryDelay","maxNetworkRetryDelay","getMaxNetworkRetryDelay","sleepSeconds","Math","min","pow","random","max","Number","isInteger","_getMaxNetworkRetries","settings","maxNetworkRetries","getMaxNetworkRetries","_defaultIdempotencyKey","uuid4","_makeHeaders","auth","contentLength","clientUserAgent","userSuppliedHeaders","userSuppliedSettings","defaultHeaders","Authorization","Accept","_getUserAgentString","_getTelemetryHeader","assign","normalizeHeaders","packageVersion","getConstant","appInfo","_appInfo","getAppInfoAsString","trim","getTelemetryEnabled","_prevRequestMetrics","length","metrics","shift","JSON","stringify","last_request_metrics","emitWarning","push","request_duration_ms","_request","host","data","options","requestData","retryRequest","requestFn","setTimeout","makeRequest","requestStartTime","streaming","catch","isTimeoutError","TIMEOUT_ERROR_CODE","prepareAndMakeRequest","getClientUserAgent","stringifyRequestData","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst path = require('path');\n\nconst utils = require('./utils');\nconst {\n  StripeConnectionError,\n  StripeAuthenticationError,\n  StripePermissionError,\n  StripeRateLimitError,\n  StripeError,\n  StripeAPIError,\n} = require('./Error');\n\nconst HttpClient = require('./net/HttpClient');\n\n// Provide extension mechanism for Stripe Resource Sub-Classes\nStripeResource.extend = utils.protoExtend;\n\n// Expose method-creator & prepared (basic) methods\nStripeResource.method = require('./StripeMethod');\nStripeResource.BASIC_METHODS = require('./StripeMethod.basic');\n\nStripeResource.MAX_BUFFERED_REQUEST_METRICS = 100;\nconst MAX_RETRY_AFTER_WAIT = 60;\n\n/**\n * Encapsulates request logic for a Stripe Resource\n */\nfunction StripeResource(stripe, deprecatedUrlData) {\n  this._stripe = stripe;\n  if (deprecatedUrlData) {\n    throw new Error(\n      'Support for curried url params was dropped in stripe-node v7.0.0. Instead, pass two ids.'\n    );\n  }\n\n  this.basePath = utils.makeURLInterpolator(\n    this.basePath || stripe.getApiField('basePath')\n  );\n  this.resourcePath = this.path;\n  this.path = utils.makeURLInterpolator(this.path);\n\n  // DEPRECATED: This was kept for backwards compatibility in case users were\n  // using this, but basic methods are now explicitly defined on a resource.\n  if (this.includeBasic) {\n    this.includeBasic.forEach(function(methodName) {\n      this[methodName] = StripeResource.BASIC_METHODS[methodName];\n    }, this);\n  }\n\n  this.initialize(...arguments);\n}\n\nStripeResource.prototype = {\n  path: '',\n\n  // Methods that don't use the API's default '/v1' path can override it with this setting.\n  basePath: null,\n\n  initialize() {},\n\n  // Function to override the default data processor. This allows full control\n  // over how a StripeResource's request data will get converted into an HTTP\n  // body. This is useful for non-standard HTTP requests. The function should\n  // take method name, data, and headers as arguments.\n  requestDataProcessor: null,\n\n  // Function to add a validation checks before sending the request, errors should\n  // be thrown, and they will be passed to the callback/promise.\n  validateRequest: null,\n\n  createFullPath(commandPath, urlData) {\n    return path\n      .join(\n        this.basePath(urlData),\n        this.path(urlData),\n        typeof commandPath == 'function' ? commandPath(urlData) : commandPath\n      )\n      .replace(/\\\\/g, '/'); // ugly workaround for Windows\n  },\n\n  // Creates a relative resource path with symbols left in (unlike\n  // createFullPath which takes some data to replace them with). For example it\n  // might produce: /invoices/{id}\n  createResourcePathWithSymbols(pathWithSymbols) {\n    return `/${path\n      .join(this.resourcePath, pathWithSymbols || '')\n      .replace(/\\\\/g, '/')}`; // ugly workaround for Windows\n  },\n\n  // DEPRECATED: Here for backcompat in case users relied on this.\n  wrapTimeout: utils.callbackifyPromiseWithTimeout,\n\n  _timeoutHandler(timeout, req, callback) {\n    return () => {\n      const timeoutErr = new TypeError('ETIMEDOUT');\n      timeoutErr.code = 'ETIMEDOUT';\n\n      req.destroy(timeoutErr);\n    };\n  },\n\n  _addHeadersDirectlyToObject(obj, headers) {\n    // For convenience, make some headers easily accessible on\n    // lastResponse.\n\n    // NOTE: Stripe responds with lowercase header names/keys.\n    obj.requestId = headers['request-id'];\n    obj.stripeAccount = obj.stripeAccount || headers['stripe-account'];\n    obj.apiVersion = obj.apiVersion || headers['stripe-version'];\n    obj.idempotencyKey = obj.idempotencyKey || headers['idempotency-key'];\n  },\n\n  _makeResponseEvent(requestEvent, statusCode, headers) {\n    const requestEndTime = Date.now();\n    const requestDurationMs = requestEndTime - requestEvent.request_start_time;\n\n    return utils.removeNullish({\n      api_version: headers['stripe-version'],\n      account: headers['stripe-account'],\n      idempotency_key: headers['idempotency-key'],\n      method: requestEvent.method,\n      path: requestEvent.path,\n      status: statusCode,\n      request_id: this._getRequestId(headers),\n      elapsed: requestDurationMs,\n      request_start_time: requestEvent.request_start_time,\n      request_end_time: requestEndTime,\n    });\n  },\n\n  _getRequestId(headers) {\n    return headers['request-id'];\n  },\n\n  /**\n   * Used by methods with spec.streaming === true. For these methods, we do not\n   * buffer successful responses into memory or do parse them into stripe\n   * objects, we delegate that all of that to the user and pass back the raw\n   * http.Response object to the callback.\n   *\n   * (Unsuccessful responses shouldn't make it here, they should\n   * still be buffered/parsed and handled by _jsonResponseHandler -- see\n   * makeRequest)\n   */\n  _streamingResponseHandler(requestEvent, callback) {\n    return (res) => {\n      const headers = res.getHeaders();\n\n      const streamCompleteCallback = () => {\n        const responseEvent = this._makeResponseEvent(\n          requestEvent,\n          res.getStatusCode(),\n          headers\n        );\n        this._stripe._emitter.emit('response', responseEvent);\n        this._recordRequestMetrics(\n          this._getRequestId(headers),\n          responseEvent.elapsed\n        );\n      };\n\n      const stream = res.toStream(streamCompleteCallback);\n\n      // This is here for backwards compatibility, as the stream is a raw\n      // HTTP response in Node and the legacy behavior was to mutate this\n      // response.\n      this._addHeadersDirectlyToObject(stream, headers);\n\n      return callback(null, stream);\n    };\n  },\n\n  /**\n   * Default handler for Stripe responses. Buffers the response into memory,\n   * parses the JSON and returns it (i.e. passes it to the callback) if there\n   * is no \"error\" field. Otherwise constructs/passes an appropriate Error.\n   */\n  _jsonResponseHandler(requestEvent, callback) {\n    return (res) => {\n      const headers = res.getHeaders();\n      const requestId = this._getRequestId(headers);\n      const statusCode = res.getStatusCode();\n\n      const responseEvent = this._makeResponseEvent(\n        requestEvent,\n        statusCode,\n        headers\n      );\n      this._stripe._emitter.emit('response', responseEvent);\n\n      res\n        .toJSON()\n        .then(\n          (jsonResponse) => {\n            if (jsonResponse.error) {\n              let err;\n\n              // Convert OAuth error responses into a standard format\n              // so that the rest of the error logic can be shared\n              if (typeof jsonResponse.error === 'string') {\n                jsonResponse.error = {\n                  type: jsonResponse.error,\n                  message: jsonResponse.error_description,\n                };\n              }\n\n              jsonResponse.error.headers = headers;\n              jsonResponse.error.statusCode = statusCode;\n              jsonResponse.error.requestId = requestId;\n\n              if (statusCode === 401) {\n                err = new StripeAuthenticationError(jsonResponse.error);\n              } else if (statusCode === 403) {\n                err = new StripePermissionError(jsonResponse.error);\n              } else if (statusCode === 429) {\n                err = new StripeRateLimitError(jsonResponse.error);\n              } else {\n                err = StripeError.generate(jsonResponse.error);\n              }\n\n              throw err;\n            }\n\n            return jsonResponse;\n          },\n          (e) => {\n            throw new StripeAPIError({\n              message: 'Invalid JSON received from the Stripe API',\n              exception: e,\n              requestId: headers['request-id'],\n            });\n          }\n        )\n        .then(\n          (jsonResponse) => {\n            this._recordRequestMetrics(requestId, responseEvent.elapsed);\n\n            // Expose raw response object.\n            const rawResponse = res.getRawResponse();\n            this._addHeadersDirectlyToObject(rawResponse, headers);\n            Object.defineProperty(jsonResponse, 'lastResponse', {\n              enumerable: false,\n              writable: false,\n              value: rawResponse,\n            });\n\n            callback.call(this, null, jsonResponse);\n          },\n          (e) => callback.call(this, e, null)\n        );\n    };\n  },\n\n  _generateConnectionErrorMessage(requestRetries) {\n    return `An error occurred with our connection to Stripe.${\n      requestRetries > 0 ? ` Request was retried ${requestRetries} times.` : ''\n    }`;\n  },\n\n  _errorHandler(req, requestRetries, callback) {\n    return (message, detail) => {\n      callback.call(\n        this,\n        new StripeConnectionError({\n          message: this._generateConnectionErrorMessage(requestRetries),\n          detail: error,\n        }),\n        null\n      );\n    };\n  },\n\n  // For more on when and how to retry API requests, see https://stripe.com/docs/error-handling#safely-retrying-requests-with-idempotency\n  _shouldRetry(res, numRetries, maxRetries) {\n    // Do not retry if we are out of retries.\n    if (numRetries >= maxRetries) {\n      return false;\n    }\n\n    // Retry on connection error.\n    if (!res) {\n      return true;\n    }\n\n    // The API may ask us not to retry (e.g., if doing so would be a no-op)\n    // or advise us to retry (e.g., in cases of lock timeouts); we defer to that.\n    if (res.getHeaders()['stripe-should-retry'] === 'false') {\n      return false;\n    }\n    if (res.getHeaders()['stripe-should-retry'] === 'true') {\n      return true;\n    }\n\n    // Retry on conflict errors.\n    if (res.getStatusCode() === 409) {\n      return true;\n    }\n\n    // Retry on 500, 503, and other internal errors.\n    //\n    // Note that we expect the stripe-should-retry header to be false\n    // in most cases when a 500 is returned, since our idempotency framework\n    // would typically replay it anyway.\n    if (res.getStatusCode() >= 500) {\n      return true;\n    }\n\n    return false;\n  },\n\n  _getSleepTimeInMS(numRetries, retryAfter = null) {\n    const initialNetworkRetryDelay = this._stripe.getInitialNetworkRetryDelay();\n    const maxNetworkRetryDelay = this._stripe.getMaxNetworkRetryDelay();\n\n    // Apply exponential backoff with initialNetworkRetryDelay on the\n    // number of numRetries so far as inputs. Do not allow the number to exceed\n    // maxNetworkRetryDelay.\n    let sleepSeconds = Math.min(\n      initialNetworkRetryDelay * Math.pow(numRetries - 1, 2),\n      maxNetworkRetryDelay\n    );\n\n    // Apply some jitter by randomizing the value in the range of\n    // (sleepSeconds / 2) to (sleepSeconds).\n    sleepSeconds *= 0.5 * (1 + Math.random());\n\n    // But never sleep less than the base sleep seconds.\n    sleepSeconds = Math.max(initialNetworkRetryDelay, sleepSeconds);\n\n    // And never sleep less than the time the API asks us to wait, assuming it's a reasonable ask.\n    if (Number.isInteger(retryAfter) && retryAfter <= MAX_RETRY_AFTER_WAIT) {\n      sleepSeconds = Math.max(sleepSeconds, retryAfter);\n    }\n\n    return sleepSeconds * 1000;\n  },\n\n  // Max retries can be set on a per request basis. Favor those over the global setting\n  _getMaxNetworkRetries(settings = {}) {\n    return settings.maxNetworkRetries &&\n      Number.isInteger(settings.maxNetworkRetries)\n      ? settings.maxNetworkRetries\n      : this._stripe.getMaxNetworkRetries();\n  },\n\n  _defaultIdempotencyKey(method, settings) {\n    // If this is a POST and we allow multiple retries, ensure an idempotency key.\n    const maxRetries = this._getMaxNetworkRetries(settings);\n\n    if (method === 'POST' && maxRetries > 0) {\n      return `stripe-node-retry-${utils.uuid4()}`;\n    }\n    return null;\n  },\n\n  _makeHeaders(\n    auth,\n    contentLength,\n    apiVersion,\n    clientUserAgent,\n    method,\n    userSuppliedHeaders,\n    userSuppliedSettings\n  ) {\n    const defaultHeaders = {\n      // Use specified auth token or use default from this stripe instance:\n      Authorization: auth ? `Bearer ${auth}` : this._stripe.getApiField('auth'),\n      Accept: 'application/json',\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'Content-Length': contentLength,\n      'User-Agent': this._getUserAgentString(),\n      'X-Stripe-Client-User-Agent': clientUserAgent,\n      'X-Stripe-Client-Telemetry': this._getTelemetryHeader(),\n      'Stripe-Version': apiVersion,\n      'Stripe-Account': this._stripe.getApiField('stripeAccount'),\n      'Idempotency-Key': this._defaultIdempotencyKey(\n        method,\n        userSuppliedSettings\n      ),\n    };\n\n    return Object.assign(\n      utils.removeNullish(defaultHeaders),\n      // If the user supplied, say 'idempotency-key', override instead of appending by ensuring caps are the same.\n      utils.normalizeHeaders(userSuppliedHeaders)\n    );\n  },\n\n  _getUserAgentString() {\n    const packageVersion = this._stripe.getConstant('PACKAGE_VERSION');\n    const appInfo = this._stripe._appInfo\n      ? this._stripe.getAppInfoAsString()\n      : '';\n\n    return `Stripe/v1 NodeBindings/${packageVersion} ${appInfo}`.trim();\n  },\n\n  _getTelemetryHeader() {\n    if (\n      this._stripe.getTelemetryEnabled() &&\n      this._stripe._prevRequestMetrics.length > 0\n    ) {\n      const metrics = this._stripe._prevRequestMetrics.shift();\n      return JSON.stringify({\n        last_request_metrics: metrics,\n      });\n    }\n  },\n\n  _recordRequestMetrics(requestId, requestDurationMs) {\n    if (this._stripe.getTelemetryEnabled() && requestId) {\n      if (\n        this._stripe._prevRequestMetrics.length >\n        StripeResource.MAX_BUFFERED_REQUEST_METRICS\n      ) {\n        utils.emitWarning(\n          'Request metrics buffer is full, dropping telemetry message.'\n        );\n      } else {\n        this._stripe._prevRequestMetrics.push({\n          request_id: requestId,\n          request_duration_ms: requestDurationMs,\n        });\n      }\n    }\n  },\n\n  _request(method, host, path, data, auth, options = {}, callback) {\n    let requestData;\n\n    const retryRequest = (\n      requestFn,\n      apiVersion,\n      headers,\n      requestRetries,\n      retryAfter\n    ) => {\n      return setTimeout(\n        requestFn,\n        this._getSleepTimeInMS(requestRetries, retryAfter),\n        apiVersion,\n        headers,\n        requestRetries + 1\n      );\n    };\n\n    const makeRequest = (apiVersion, headers, numRetries) => {\n      // timeout can be set on a per-request basis. Favor that over the global setting\n      const timeout =\n        options.settings &&\n        Number.isInteger(options.settings.timeout) &&\n        options.settings.timeout >= 0\n          ? options.settings.timeout\n          : this._stripe.getApiField('timeout');\n\n      const req = this._stripe\n        .getApiField('httpClient')\n        .makeRequest(\n          host || this._stripe.getApiField('host'),\n          this._stripe.getApiField('port'),\n          path,\n          method,\n          headers,\n          requestData,\n          this._stripe.getApiField('protocol'),\n          timeout\n        );\n\n      const requestStartTime = Date.now();\n\n      const requestEvent = utils.removeNullish({\n        api_version: apiVersion,\n        account: headers['Stripe-Account'],\n        idempotency_key: headers['Idempotency-Key'],\n        method,\n        path,\n        request_start_time: requestStartTime,\n      });\n\n      const requestRetries = numRetries || 0;\n\n      const maxRetries = this._getMaxNetworkRetries(options.settings);\n\n      this._stripe._emitter.emit('request', requestEvent);\n\n      req\n        .then((res) => {\n          if (this._shouldRetry(res, requestRetries, maxRetries)) {\n            return retryRequest(\n              makeRequest,\n              apiVersion,\n              headers,\n              requestRetries,\n              res.getHeaders()['retry-after']\n            );\n          } else if (options.streaming && res.getStatusCode() < 400) {\n            return this._streamingResponseHandler(requestEvent, callback)(res);\n          } else {\n            return this._jsonResponseHandler(requestEvent, callback)(res);\n          }\n        })\n        .catch((error) => {\n          if (this._shouldRetry(null, requestRetries, maxRetries)) {\n            return retryRequest(\n              makeRequest,\n              apiVersion,\n              headers,\n              requestRetries,\n              null\n            );\n          } else {\n            const isTimeoutError =\n              error.code && error.code === HttpClient.TIMEOUT_ERROR_CODE;\n\n            return callback.call(\n              this,\n              new StripeConnectionError({\n                message: isTimeoutError\n                  ? `Request aborted due to timeout being reached (${timeout}ms)`\n                  : this._generateConnectionErrorMessage(requestRetries),\n                detail: error,\n              })\n            );\n          }\n        });\n    };\n\n    const prepareAndMakeRequest = (error, data) => {\n      if (error) {\n        return callback(error);\n      }\n\n      requestData = data;\n\n      this._stripe.getClientUserAgent((clientUserAgent) => {\n        const apiVersion = this._stripe.getApiField('version');\n        const headers = this._makeHeaders(\n          auth,\n          requestData.length,\n          apiVersion,\n          clientUserAgent,\n          method,\n          options.headers,\n          options.settings\n        );\n\n        makeRequest(apiVersion, headers);\n      });\n    };\n\n    if (this.requestDataProcessor) {\n      this.requestDataProcessor(\n        method,\n        data,\n        options.headers,\n        prepareAndMakeRequest\n      );\n    } else {\n      prepareAndMakeRequest(null, utils.stringifyRequestData(data || {}));\n    }\n  },\n};\n\nmodule.exports = StripeResource;\n"]},"metadata":{},"sourceType":"script"}